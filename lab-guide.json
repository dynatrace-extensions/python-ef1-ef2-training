[{"id":"1","name":"Introduction","content":"<h2 id=\"introduction\">Introduction</h2>\n<p>In this course we will learn how to convert python extensions from the Extension Framework V1 to Extension Framework V2.  </p>\n<h2 id=\"requirements\">Requirements</h2>\n<h3 id=\"dynatrace\">Dynatrace</h3>\n<ul>\n<li>Access to a Dynatrace environment </li>\n<li>An Activegate that you own, it can be your local laptop, connected to the Dynatrace environment</li>\n<li>VSCode with the <a href=\"https://marketplace.visualstudio.com/items?itemName=DynatracePlatformExtensions.dynatrace-extensions\">Dynatrace Extensions</a> extension installed</li>\n<li>Connect your Dynatrace environment to the extension as documented <a href=\"https://developer.dynatrace.com/extensions-v2/dynatrace-extensions-vscode/guides/getting-started/\">here</a></li>\n</ul>\n<h3 id=\"knowledge\">Knowledge</h3>\n<p>For this course, you should be familiar with the following topics:</p>\n<ul>\n<li>Dynatrace extensions - https://docs.dynatrace.com/docs/extend-dynatrace/extensions</li>\n<li>MINT - https://docs.dynatrace.com/docs/extend-dynatrace/extend-metrics/reference/metric-ingestion-protocol</li>\n<li>Custom Topology and Relationships - https://docs.dynatrace.com/docs/extend-dynatrace/extend-topology/custom-topology</li>\n<li>Unified Analysis Pages - https://docs.dynatrace.com/docs/extend-dynatrace/extend-ui/unified-analysis</li>\n<li>Python development</li>\n</ul>","activityList":[{"id":"1.1","name":"Extension Framework","content":"<h2 id=\"extensionframework\">Extension Framework</h2>\n<h3 id=\"whatistheextensionframework\">What is the Extension Framework?</h3>\n<p>Dynatrace provides ways for us to extend the platform.<br />\nWhen it comes to Extensions, this <em>usually</em> means adding:</p>\n<ul>\n<li>Metrics</li>\n<li>Events</li>\n<li>Charts</li>\n</ul>\n<p>For technologies that we do not support OOTB.<br />\nThis includes JMX and Python Extensions.  </p>\n<p>Examples of technologies supported via extensions are:  </p>\n<ul>\n<li><strong>IBM MQ</strong></li>\n<li><strong>Citrix</strong></li>\n<li><strong>Netscaler</strong></li>\n<li><strong>Datapower</strong></li>\n<li><strong>Kafka</strong></li>\n</ul>\n<p>We call <strong>Extension Framework</strong> the set of software components and tooling that allows one to extend the Dynatrace platform via extensions.  </p>\n<h3 id=\"extensionframeworkv1\">Extension Framework V1</h3>\n<p>The Extension Framework V1, or EF1 (also known as plugins/plugin module/remote plugin module) is a Dynatrace component that can run python extensions in Activegates (remote) and OneAgents (local).  </p>\n<p>It is primarily composed of:</p>\n<ul>\n<li><strong>[Remote] Plugin Module</strong> - A service that comes with the AG (remote) and OA (local) and can run python extensions. </li>\n<li><strong>plugin-sdk</strong> - A python library that allows you to write, simulate and build python extensions</li>\n<li><strong>JMX Wizard and JMX Extensions</strong> - A tool that allows you to write, and deploy JMX extensions</li>\n</ul>\n<p>There are some challenges when it comes to EF1, mainly:</p>\n<ul>\n<li><strong>Distribution and Scalability</strong> - Every extension zip file must be manually placed in the OneAgents or Activegates, they must also be uploaded to the Dynatrace environment. </li>\n<li><strong>UI Customization</strong> - You are limited to adding simple charts to HOSTs, PGIs or Custom Device screens</li>\n<li><strong>Data types</strong> - Only metrics and events are supported</li>\n<li><strong>Python runtime</strong> - A single python runtime is shared between all extensions, making dealing with dependencies, performance and name collisions a challenge</li>\n<li><strong>Few datasources</strong> - Only python and JMX</li>\n<li>* <strong>Other Limitations</strong> - Several limits are imposed, like the query method must run every minute, you can only have 100 unique dimensions per metric, only two key metrics, need to define metric metadata before collection, two separate extensions for AG and OA for the same technology, simple extension parameters in the UI, no way to filter which metrics to report, etc.</li>\n</ul>\n<h3 id=\"extensionframeworkv2\">Extension Framework V2</h3>\n<p>The Extension Framework V2 (EF2) addresses many of the issues with EF1, in it's core is the Extensions Execution Controller (EEC), which replaces the former plugin module.   </p>\n<table>\n<thead>\n<tr>\n<th>Issues</th>\n<th>EF1</th>\n<th>EF2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Distribution</strong></td>\n<td>Manual distribution</td>\n<td>Automatically deploys to AGs and OAs</td>\n</tr>\n<tr>\n<td><strong>Scalability</strong></td>\n<td>Single Activegate assigned to an endpoint</td>\n<td>Activegate groups, Host groups, Tags, load balancing</td>\n</tr>\n<tr>\n<td><strong>UI Customization</strong></td>\n<td>Simple charts and Custom Devices</td>\n<td>Custom Topology, Unified Analysis Screens</td>\n</tr>\n<tr>\n<td><strong>Data types</strong></td>\n<td>Metrics and events</td>\n<td>Metrics, events, logs</td>\n</tr>\n<tr>\n<td><strong>Python runtime</strong></td>\n<td>Shared interpreter and environment between extensions</td>\n<td>Unique interpreter and environment for each extension</td>\n</tr>\n<tr>\n<td><strong>Datasources</strong></td>\n<td>Python and JMX</td>\n<td>Python, JMX, SQL, WMI, SNMP, SNMP Traps, Prometheus</td>\n</tr>\n</tbody>\n</table>\n<p>The EEC is a service installed with the Activegate and the OneAgent, and provides low level mechanisms to run extensions and communicate with Dynatrace.  You can see the EEC running in your hosts as \"extensionsmodule[.exe]\" for the AG and \"oneagent_extensions[.exe]\" for the OA.  </p>\n<p>The EEC can run <code>datasources</code>, which are programs that support different types of extensions. These datasource come bundled with the AG and OA.</p>\n<p>Most of these datasources are <strong>declarative</strong>, meaning you only need to provide a yaml file that describes which metrics, events, screens, topology you want your extension to create and collect, and no coding is required at all.</p>\n<p>These declarative datasources are (as of today): </p>\n<ul>\n<li><strong>SQL</strong> - Can query databases. (AG only)</li>\n<li><strong>WMI</strong> - Can query Windows machines using WMI (Windows Management Instrumentation) queries. (Windows OA and AGs only)</li>\n<li><strong>SNMP</strong> - Can query SNMP devices  (AG only)</li>\n<li><strong>SNMP Traps</strong> - Can listen for SNMP traps  (AG only)</li>\n<li><strong>Prometheus</strong> - Can scrape prometheus metrics (server and exporters) (AG and OA)</li>\n<li><strong>JMX</strong> - Can obtain JMX metrics from an OneAgent monitored JVM. (OA only)</li>\n</ul>\n<p>Under the hood this is implemented via programming languages datasources, which are developed and maintained by R&amp;D. \nThese datasources can be expanded in the future, to provide declarative support for new technologies.  </p>\n<ul>\n<li><strong>Java datasource</strong> : SQL</li>\n<li><strong>Go datasource</strong>: SNMP, SNMP Traps, Prometheus and WMI</li>\n</ul>\n<p>Still, we need <strong>a way to let developers (extensions team, services, partners, customers) to write coded extensions</strong>, not everything can be done declaratively, and R&amp;D cannot cover every use case and technology in the market.  </p>\n<p>This is why the EEC also supports the <strong>Python datasource.</strong><br />\nThis datasource allows you to write <strong>python extensions</strong>, which are python modules that can run custom python code from Activegates and OneAgents.  </p>\n<p>From now on, we will focus on the <strong>Python datasource</strong> and how to convert custom python extensions from EF1 to EF2.  </p>","activityList":[]}]},{"id":"2","name":"Converting Python Extensions","content":"<h2 id=\"convertingpythonextensions\">Converting Python Extensions</h2>\n<h3 id=\"highleveloverview\">High level overview</h3>\n<p>Here is how EF1 python extensions components map to EF2 python extensions components:  </p>\n<table>\n<thead>\n<tr>\n<th>Description</th>\n<th>EF1</th>\n<th>EF2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Metadata, version, screens, topology</td>\n<td><code>plugin.json</code></td>\n<td><code>extension.yaml</code></td>\n</tr>\n<tr>\n<td>Extension parametes (like usernames, urls, passwords)</td>\n<td><code>plugin.json</code></td>\n<td><code>activationSchema.json</code></td>\n</tr>\n<tr>\n<td>Development file to simulate extension parameters</td>\n<td><code>properties.json</code></td>\n<td><code>activation.json</code></td>\n</tr>\n<tr>\n<td>Python library to write, simulate and build python extensions</td>\n<td><code>plugin-sdk</code></td>\n<td><code>dt-extensions-sdk</code></td>\n</tr>\n<tr>\n<td>Dependencies</td>\n<td><code>plugin.json</code></td>\n<td><code>setup.py</code></td>\n</tr>\n<tr>\n<td>Artifact</td>\n<td>extension zip file</td>\n<td><strong>signed</strong> extension zip file</td>\n</tr>\n<tr>\n<td>Extension code</td>\n<td>a python class in a <code>.py</code> file</td>\n<td>standalone python <strong>module</strong></td>\n</tr>\n</tbody>\n</table>\n<p>So, in a high level view, the steps to convert an EF1 python extension to EF2 are:  </p>\n<ol>\n<li>Convert the <code>plugin.json</code> file to <code>extension.yaml</code> and <code>activationSchema.json</code></li>\n<li>Create a python extension with <code>dt-extensions-sdk</code>, and move the code from the <code>.py</code> file to the <code>__main__.py</code> file</li>\n<li>Build and sign the extension</li>\n</ol>","activityList":[{"id":"2.1","name":"Structure of a python extension","content":"<h2 id=\"structureofapythonextension\">Structure of a python extension</h2>\n<p>In this section we will explore some of the differences between the structure of an EF1 and an EF2 python extension.  </p>\n<h3 id=\"projectstructure\">Project structure</h3>\n<p>Let's observe the differences between the folder structure of an EF1 and an EF2 python extension:</p>\n<ul>\n<li>EF1 </li>\n</ul>\n<p><img src=\"assets/structure-ef1.png\" alt=\"structure-ef1\" /></p>\n<ul>\n<li>EF2</li>\n</ul>\n<p><img src=\"assets/structure-ef2.png\" alt=\"structure-ef2\" /></p>\n<p>Even though there are more files in the Extension EF2, the structure makes more sense and it is more modular.<br />\nThe advantages of such structure are:  </p>\n<ol>\n<li>The extension is a <a href=\"https://docs.python.org/3/tutorial/modules.html\">standalone python module</a>. It can run on it's own and generates a python <a href=\"https://packaging.python.org/en/latest/specifications/binary-distribution-format/#binary-distribution-format\">wheel file</a> when built.</li>\n<li>The <strong>parameters</strong> are <strong>separated</strong> from metadata. (Paramaters are almost always mandatory, metadata is optional and can be defined elsewhere)</li>\n</ol>\n<h3 id=\"sdkinstallation\">SDK installation</h3>\n<p>Every extension needs to use the Python SDK, both for development and during the runtime.   </p>\n<p>To install the python SDK for <strong>EF1</strong>, the steps were:</p>\n<ol>\n<li>Download the SDK zip file from Dynatrace, <code>Settings</code> &gt; <code>Monitored technologies</code> &gt; <code>Add Activegate Extension</code> &gt; <code>Download Extension SDK</code></li>\n<li>Extract the wheel file out of the SDK zip file</li>\n<li>Install the wheel file with something like <code>pip install D:\\tmp\\plugin_sdk-1.279.60.20231102.112406-py3-none-any.whl</code></li>\n</ol>\n<p>For <strong>EF2</strong>, the only step is:</p>\n<ol>\n<li><code>pip install dt-extensions-sdk[cli]</code></li>\n</ol>\n<hr />\n<p>Note: <strong>always</strong> use a python virtual environment when installing python libraries.  </p>\n<p>One can be created with </p>\n<pre><code class=\"hljs bash language-bash\">python -m venv venv\n<span class=\"hljs-comment\"># Then, on windows:</span>\n.\\venv\\Scripts\\activate\n\n<span class=\"hljs-comment\"># Or, on linux:</span>\n<span class=\"hljs-built_in\">source</span> venv/bin/activate\n</code></pre>\n<hr />\n<h3 id=\"projectcreation\">Project creation</h3>\n<p>To create an <strong>EF1 extension</strong>, you need to manually create the extension files, usually by copying from some other extension.  </p>\n<p>To create an <strong>EF2 extension</strong>, you can use the <strong>SDK</strong>:</p>\n<pre><code class=\"hljs bash language-bash\">dt-sdk create\n</code></pre>\n<p><img src=\"assets/dt-sdk-create.png\" alt=\"dt-sdk-create\" /></p>\n<h3 id=\"runningtheextension\">Running the extension</h3>\n<p>To run an <strong>EF1 extension</strong>:</p>\n<pre><code class=\"hljs bash language-bash\">plugin_sdk simulate_plugin\n<span class=\"hljs-comment\"># or oneagent_sim</span>\n<span class=\"hljs-comment\"># or oneagent_simulate_plugin</span>\n</code></pre>\n<p>To run an <strong>EF2 extension</strong>:</p>\n<pre><code class=\"hljs bash language-bash\">dt-sdk run\n</code></pre>\n<h3 id=\"buildingtheextension\">Building the extension</h3>\n<p>To build an <strong>EF1 extension</strong>:</p>\n<pre><code class=\"hljs bash language-bash\">plugin_sdk build_plugin\n<span class=\"hljs-comment\"># or oneagent_build_plugin</span>\n</code></pre>\n<p>To build (and sign) an <strong>EF2 extension</strong>:</p>\n<pre><code class=\"hljs bash language-bash\">dt-sdk build\n</code></pre>\n<h3 id=\"uploadingtheextension\">Uploading the extension</h3>\n<p>To upload an <strong>EF1 extension</strong>:</p>\n<pre><code class=\"hljs bash language-bash\">plugin_sdk upload_plugin\n</code></pre>\n<p>To upload an <strong>EF2 extension</strong>:</p>\n<pre><code class=\"hljs bash language-bash\">dt-sdk upload\n</code></pre>","activityList":[]},{"id":"2.2","name":"Code differences","content":"<h2 id=\"codedifferences\">Code differences</h2>\n<h3 id=\"extensionclass\">Extension Class</h3>\n<p>Note the similarities between the next code examples:</p>\n<ul>\n<li>They are both a class that extends some Extension class.</li>\n<li>They both have methods to report metrics and events</li>\n<li>They both implement the <strong>query</strong> method, which runs every minute</li>\n<li>They both implement the <strong>initialize</strong> method, which runs once when the extension starts</li>\n</ul>\n<p>This is a typical EF1 extension:</p>\n<pre><code class=\"hljs python language-python\"><span class=\"hljs-keyword\">from</span> ruxit.api.base_plugin <span class=\"hljs-keyword\">import</span> RemoteBasePlugin\n<span class=\"hljs-keyword\">from</span> ruxit.api.selectors <span class=\"hljs-keyword\">import</span> ExplicitSelector, EntityType\n\n<span class=\"hljs-comment\"># Note how this extends RemoteBasePlugin (this extension can only run on an Activegate)</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RabbitMQExtension</span>(<span class=\"hljs-params\">RemoteBasePlugin</span>):</span>\n\n    <span class=\"hljs-comment\"># Optional method to initialize data before running the extension</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span>(<span class=\"hljs-params\">self, **kwargs</span>):</span>\n        self.executions = -<span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">query</span>(<span class=\"hljs-params\">self, **kwargs</span>) -&gt; <span class=\"hljs-keyword\">None</span>:</span>\n        <span class=\"hljs-comment\"># Logging to the extension log</span>\n        self.logger.info(<span class=\"hljs-string\">&quot;Started the query method&quot;</span>)\n\n        <span class=\"hljs-comment\"># Obtaining user defined parameters</span>\n        node_address = self.config.get(<span class=\"hljs-string\">&quot;rabbit_mq_node&quot;</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>)\n        username = self.config.get(<span class=\"hljs-string\">&quot;rabbitmq_username&quot;</span>, <span class=\"hljs-string\">&quot;guest&quot;</span>)\n        password = self.config.get(<span class=\"hljs-string\">&quot;rabbitmq_password&quot;</span>, <span class=\"hljs-string\">&quot;guest&quot;</span>)\n\n        <span class=\"hljs-comment\"># Creating a custom device (not needed in EF2)</span>\n        group = self.topology_builder.create_group(<span class=\"hljs-string\">&quot;Rabbit MQ Group&quot;</span>, <span class=\"hljs-string\">&quot;Rabbit MQ Group&quot;</span>)\n        device = group.create_device(<span class=\"hljs-string\">f&quot;RabbitMQ Node <span class=\"hljs-subst\">{node_address}</span>&quot;</span>)\n\n        <span class=\"hljs-comment\"># Reporting an event</span>\n        self.results_builder.report_custom_info_event(error_message,\n         <span class=\"hljs-string\">&quot;RabbitMQ connection issue with one node&quot;</span>,\n         entity_selector=ExplicitSelector(group.<span class=\"hljs-built_in\">id</span>, EntityType.CUSTOM_DEVICE_GROUP)) \n\n        <span class=\"hljs-comment\"># Reporting a metric</span>\n        device.absolute(<span class=\"hljs-string\">&quot;my.metric&quot;</span>, <span class=\"hljs-number\">1</span>, {<span class=\"hljs-string\">&quot;device_name&quot;</span>: <span class=\"hljs-string\">&quot;My Device&quot;</span>})\n</code></pre>\n<p>This is the same extension on EF2:</p>\n<pre><code class=\"hljs python language-python\"><span class=\"hljs-keyword\">from</span> dynatrace_extension <span class=\"hljs-keyword\">import</span> Extension\n<span class=\"hljs-keyword\">from</span> dynatrace_extension.sdk.event <span class=\"hljs-keyword\">import</span> Severity\n\n<span class=\"hljs-comment\"># The base class is always the same, this can run on an Activegate or OneAgent</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExtensionImpl</span>(<span class=\"hljs-params\">Extension</span>):</span>\n\n    <span class=\"hljs-comment\"># Optional method to initialize data before running the extension</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span>(<span class=\"hljs-params\">self</span>):</span>\n        self.executions = -<span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">query</span>(<span class=\"hljs-params\">self</span>):</span>\n        <span class=\"hljs-comment\"># Logging to the extension log</span>\n        self.logger.info(<span class=\"hljs-string\">&quot;Started the query method&quot;</span>)\n\n        <span class=\"hljs-comment\"># Obtaining user defined parameters</span>\n        node_address = self.activation_config.get(<span class=\"hljs-string\">&quot;rabbit_mq_node&quot;</span>, <span class=\"hljs-string\">&quot;localhost&quot;</span>)\n        username = self.activation_config.get(<span class=\"hljs-string\">&quot;rabbitmq_username&quot;</span>, <span class=\"hljs-string\">&quot;guest&quot;</span>)\n        password = self.activation_config.get(<span class=\"hljs-string\">&quot;rabbitmq_password&quot;</span>, <span class=\"hljs-string\">&quot;guest&quot;</span>)\n\n        <span class=\"hljs-comment\"># Reporting an event</span>\n        self.report_dt_event(Severity.INFO, <span class=\"hljs-string\">&quot;RabbitMQ connection issue with one node&quot;</span>)\n\n        <span class=\"hljs-comment\"># Reporting a metric</span>\n        self.report_metric(<span class=\"hljs-string\">&quot;my.metric&quot;</span>, <span class=\"hljs-number\">1</span>, {<span class=\"hljs-string\">&quot;device_name&quot;</span>: <span class=\"hljs-string\">&quot;My Device&quot;</span>})\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span>\n    ExtensionImpl().run()\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:\n    main()\n</code></pre>\n<h3 id=\"quickmethodreference\">Quick method Reference</h3>\n<p>The methods are quite similar, the SDK was written with developer experience in mind.<br />\nHere is a table of the most common methods and their EF1 and EF2 counterparts:  </p>\n<table>\n<thead>\n<tr>\n<th>Description</th>\n<th>EF1 method</th>\n<th>EF2 method</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Logging</td>\n<td><code>self.logger.info(\"message\")</code></td>\n<td><code>self.logger.info(\"message\")</code></td>\n<td>Stays the same</td>\n</tr>\n<tr>\n<td>Obtaining user defined parameters</td>\n<td><code>self.config.get(\"param_name\", \"default_value\")</code></td>\n<td><code>self.activation_config.get(\"param_name\", \"default_value\")</code></td>\n<td>You can find and replace all <code>self.config.</code> entries with <code>self.activation_config.</code></td>\n</tr>\n<tr>\n<td>Report an event</td>\n<td><code>self.results_builder.report_custom_info_event</code></td>\n<td><code>self.report_dt_event</code></td>\n<td>Try to keep topology (groups, device, IDs) out of the code, this is defined later in the <code>extension.yaml</code> file.</td>\n</tr>\n<tr>\n<td>Report a metric</td>\n<td><code>device.absolute(\"metric_key\", metric_value, {\"dimension_name\": \"dimension_value\"})</code></td>\n<td><code>self.report_metric(\"metric_key\", metric_value, {\"dimension_name\": \"dimension_value\"})</code></td>\n<td>There is no concept of a <code>device</code> in the python code anymore, send metrics directly.</td>\n</tr>\n<tr>\n<td>Create groups and custom devices</td>\n<td><code>self.topology_builder.create_group</code>, <code>group.create_device</code></td>\n<td>n/a</td>\n<td>Doesn't exist, topology is defined in the <code>extension.yaml</code> file.</td>\n</tr>\n</tbody>\n</table>\n<p>The EF2 SDK also provides many other methods that are not available in EF1:</p>\n<table>\n<thead>\n<tr>\n<th>Description</th>\n<th>Method</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Report a log event</td>\n<td><code>self.report_log_event</code></td>\n</tr>\n<tr>\n<td>Report multiple log events</td>\n<td><code>self.report_log_events</code></td>\n</tr>\n<tr>\n<td>Report multiple log lines</td>\n<td><code>self.report_log_lines</code></td>\n</tr>\n<tr>\n<td>Report multiple metrics</td>\n<td><code>self.report_mint_lines</code></td>\n</tr>\n<tr>\n<td>Schedule a method to run periodically</td>\n<td><code>self.schedule</code></td>\n</tr>\n</tbody>\n</table>\n<p>Please check the documentation [here](TODO: LINK TO DOCS)</p>","activityList":[]},{"id":"2.3","name":"Metadata differences","content":"<h2 id=\"metadatadifferences\">Metadata differences</h2>\n<p>There are three main metadata components in an extension:</p>\n<ul>\n<li>Name, entrypoint, version, metrics, charts</li>\n<li>Dependencies (python libraries that your code needs)</li>\n<li>Extension parameters (user defined)</li>\n</ul>\n<h3 id=\"extensionnameentrypointversionmetricscharts\">Extension name, entrypoint, version, metrics, charts</h3>\n<p>In <strong>EF1</strong>, these were in <code>plugin.json</code>, example:</p>\n<pre><code class=\"hljs json language-json\">{\n  <span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;custom.remote.python.rabbit_mq&quot;</span>,\n  <span class=\"hljs-attr\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;1.0.1&quot;</span>,\n  <span class=\"hljs-attr\">&quot;metricGroup&quot;</span>: <span class=\"hljs-string\">&quot;tech.RabbitMQ&quot;</span>,\n  <span class=\"hljs-attr\">&quot;technologies&quot;</span>: [<span class=\"hljs-string\">&quot;RabbitMQ&quot;</span>],\n  <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;python&quot;</span>,\n  <span class=\"hljs-attr\">&quot;entity&quot;</span>: <span class=\"hljs-string\">&quot;CUSTOM_DEVICE&quot;</span>,\n  <span class=\"hljs-attr\">&quot;source&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;package&quot;</span>: <span class=\"hljs-string\">&quot;rabbitmq_extension&quot;</span>,\n    <span class=\"hljs-attr\">&quot;className&quot;</span>: <span class=\"hljs-string\">&quot;RabbitMQExtension&quot;</span>,\n    <span class=\"hljs-attr\">&quot;install_requires&quot;</span>: []\n  },\n  <span class=\"hljs-attr\">&quot;metrics&quot;</span>: [\n    {<span class=\"hljs-attr\">&quot;timeseries&quot;</span>: {<span class=\"hljs-attr\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;messages_ready&quot;</span>, <span class=\"hljs-attr\">&quot;unit&quot;</span>: <span class=\"hljs-string\">&quot;Count&quot;</span>, <span class=\"hljs-attr\">&quot;dimensions&quot;</span>: [<span class=\"hljs-string\">&quot;Queue&quot;</span>, <span class=\"hljs-string\">&quot;VirtualHost&quot;</span>],<span class=\"hljs-attr\">&quot;displayname&quot;</span>: <span class=\"hljs-string\">&quot;Messages Ready&quot;</span>}},\n    {<span class=\"hljs-attr\">&quot;timeseries&quot;</span>: {<span class=\"hljs-attr\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;messages_unacknowledged&quot;</span>, <span class=\"hljs-attr\">&quot;unit&quot;</span>: <span class=\"hljs-string\">&quot;Count&quot;</span>, <span class=\"hljs-attr\">&quot;dimensions&quot;</span>: [<span class=\"hljs-string\">&quot;Queue&quot;</span>, <span class=\"hljs-string\">&quot;VirtualHost&quot;</span>],<span class=\"hljs-attr\">&quot;displayname&quot;</span>: <span class=\"hljs-string\">&quot;Messages Unacknowledged&quot;</span>}}\n  ],\n  <span class=\"hljs-attr\">&quot;ui&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;charts&quot;</span>: [\n    {<span class=\"hljs-attr\">&quot;group&quot;</span>: <span class=\"hljs-string\">&quot;Messages&quot;</span>, <span class=\"hljs-attr\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;Message rates&quot;</span>, <span class=\"hljs-attr\">&quot;series&quot;</span>:  [\n      {<span class=\"hljs-attr\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;messages_ack&quot;</span>, <span class=\"hljs-attr\">&quot;displayname&quot;</span>: <span class=\"hljs-string\">&quot;Acknowledge&quot;</span>},\n      {<span class=\"hljs-attr\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;messages_deliver_get&quot;</span>, <span class=\"hljs-attr\">&quot;displayname&quot;</span>: <span class=\"hljs-string\">&quot;Deliver Get&quot;</span>},\n    ]},\n    {<span class=\"hljs-attr\">&quot;group&quot;</span>: <span class=\"hljs-string\">&quot;Messages&quot;</span>, <span class=\"hljs-attr\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;Messages&quot;</span>, <span class=\"hljs-attr\">&quot;series&quot;</span>:  [\n      {<span class=\"hljs-attr\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;messages_ready&quot;</span>, <span class=\"hljs-attr\">&quot;displayname&quot;</span>: <span class=\"hljs-string\">&quot;Ready&quot;</span>},\n      {<span class=\"hljs-attr\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;messages_unacknowledged&quot;</span>, <span class=\"hljs-attr\">&quot;displayname&quot;</span>: <span class=\"hljs-string\">&quot;Unacknowledged&quot;</span>}\n    ]}\n  ]}\n}\n</code></pre>\n<p>In <strong>EF2</strong>, these are in <code>extension.yaml</code>, example:</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">com.dynatrace.mulesoft-cloudhub</span>\n<span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">1.1</span><span class=\"hljs-number\">.22</span>\n<span class=\"hljs-attr\">minDynatraceVersion:</span> <span class=\"hljs-string\">&quot;1.256&quot;</span>\n<span class=\"hljs-attr\">author:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Dynatrace</span>\n\n<span class=\"hljs-comment\"># Python datasource entrypoint (module name and settings 2.0 UI file)</span>\n<span class=\"hljs-attr\">python:</span>\n  <span class=\"hljs-attr\">runtime:</span>\n    <span class=\"hljs-attr\">module:</span> <span class=\"hljs-string\">mulesoft_cloudhub</span>\n    <span class=\"hljs-attr\">version:</span>\n      <span class=\"hljs-attr\">min:</span> <span class=\"hljs-string\">&quot;3.9&quot;</span>\n  <span class=\"hljs-attr\">activation:</span>\n    <span class=\"hljs-attr\">remote:</span>\n      <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">activationSchema.json</span>\n\n<span class=\"hljs-comment\"># These are completely optional</span>\n<span class=\"hljs-attr\">metrics:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">cloudhub.app.requests</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Inbound</span> <span class=\"hljs-string\">Requests</span>\n      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">The</span> <span class=\"hljs-string\">number</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">inbound</span> <span class=\"hljs-string\">requests</span> <span class=\"hljs-string\">for</span> <span class=\"hljs-string\">this</span> <span class=\"hljs-string\">application</span>\n      <span class=\"hljs-attr\">unit:</span> <span class=\"hljs-string\">Count</span>\n      <span class=\"hljs-attr\">sourceEntityType:</span> <span class=\"hljs-string\">cloudhub:app</span>\n      <span class=\"hljs-attr\">tags:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">custom:mulesoft-cloudhub</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">cloudhub.app.errors</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Errors</span>\n      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">The</span> <span class=\"hljs-string\">number</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">errors</span> <span class=\"hljs-string\">for</span> <span class=\"hljs-string\">this</span> <span class=\"hljs-string\">application</span>\n      <span class=\"hljs-attr\">unit:</span> <span class=\"hljs-string\">Count</span>\n      <span class=\"hljs-attr\">sourceEntityType:</span> <span class=\"hljs-string\">cloudhub:app</span>\n      <span class=\"hljs-attr\">tags:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">custom:mulesoft-cloudhub</span>\n\n<span class=\"hljs-comment\"># These are also optional, and powerful</span>\n<span class=\"hljs-attr\">screens:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">entityType:</span> <span class=\"hljs-string\">cloudhub:org</span>\n    <span class=\"hljs-comment\"># // Rest of the screen definition</span>\n</code></pre>\n<h3 id=\"dependencies\">Dependencies</h3>\n<p>In <strong>EF1</strong> they were also part of the <code>plugin.json</code> file, under <em>source/install_requires</em></p>\n<p>In <strong>EF2</strong> they are in <code>setup.py</code>, example:</p>\n<pre><code class=\"hljs python language-python\"><span class=\"hljs-keyword\">from</span> setuptools <span class=\"hljs-keyword\">import</span> setup, find_packages\n\nsetup(name=<span class=\"hljs-string\">&quot;salesforce_extension&quot;</span>,\n      version=<span class=\"hljs-string\">&quot;1.0.0&quot;</span>,\n      description=<span class=\"hljs-string\">&quot;Salesforce Extension for Dynatrace&quot;</span>,\n      author=<span class=\"hljs-string\">&quot;Dynatrace&quot;</span>,\n      packages=find_packages(),\n      python_requires=<span class=\"hljs-string\">&quot;&gt;=3.10&quot;</span>,\n      include_package_data=<span class=\"hljs-literal\">True</span>,\n      install_requires=[<span class=\"hljs-string\">&quot;dt-extensions-sdk&quot;</span>, <span class=\"hljs-string\">&quot;requests&quot;</span>],\n      extras_require={<span class=\"hljs-string\">&quot;dev&quot;</span>: [<span class=\"hljs-string\">&quot;dt-extensions-sdk[cli]&quot;</span>]},\n      )\n</code></pre>\n<h3 id=\"extensionparameters\">Extension parameters</h3>\n<p>In <strong>EF1</strong> they were also part of the <code>plugin.json</code> file, under two different keys:</p>\n<pre><code class=\"hljs json language-json\">{\n    <span class=\"hljs-attr\">&quot;properties&quot;</span>: [\n        {<span class=\"hljs-attr\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;rabbitmq_nodes&quot;</span>, <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;Textarea&quot;</span>},\n        {<span class=\"hljs-attr\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;rabbitmq_username&quot;</span>, <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;String&quot;</span>, <span class=\"hljs-attr\">&quot;defaultValue&quot;</span>: <span class=\"hljs-string\">&quot;guest&quot;</span>},\n        {<span class=\"hljs-attr\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;rabbitmq_password&quot;</span>, <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;Password&quot;</span>}\n    ],\n    <span class=\"hljs-attr\">&quot;configUI&quot;</span>: {\n        <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;RabbitMQ&quot;</span>,\n        <span class=\"hljs-attr\">&quot;properties&quot;</span>: [\n            {<span class=\"hljs-attr\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;rabbitmq_nodes&quot;</span>, <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;RabbitMQ Nodes&quot;</span>, <span class=\"hljs-attr\">&quot;displayHint&quot;</span>: <span class=\"hljs-string\">&quot;One url per line.&quot;</span>, <span class=\"hljs-attr\">&quot;displayOrder&quot;</span>: <span class=\"hljs-number\">1</span>},\n            {<span class=\"hljs-attr\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;rabbitmq_username&quot;</span>, <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;RabbitMQ User&quot;</span>, <span class=\"hljs-attr\">&quot;displayOrder&quot;</span>: <span class=\"hljs-number\">2</span>},\n            {<span class=\"hljs-attr\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;rabbitmq_password&quot;</span>, <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;RabbitMQ Password&quot;</span>, <span class=\"hljs-attr\">&quot;displayOrder&quot;</span>: <span class=\"hljs-number\">3</span>}\n        ]\n    }\n}\n</code></pre>\n<p>In <strong>EF2</strong> we leverage <strong>Settings 2.0</strong>, a much more powerful and customizable UI experience.<br />\nIt is more verbose as well, but it is worth it.<br />\nExtensions come with a pre-configured UI with fields for a URL, username and password, but you can customize it to your needs.  </p>\n<pre><code class=\"hljs json language-json\">{\n    <span class=\"hljs-attr\">&quot;authentication&quot;</span>: {\n      <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;object&quot;</span>,\n      <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;Authentication&quot;</span>,\n      <span class=\"hljs-attr\">&quot;properties&quot;</span>: {\n        <span class=\"hljs-attr\">&quot;authentication_type&quot;</span>: {\n          <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;Authentication type&quot;</span>,\n          <span class=\"hljs-attr\">&quot;type&quot;</span>: {\n            <span class=\"hljs-attr\">&quot;$ref&quot;</span>: <span class=\"hljs-string\">&quot;#/enums/authentication_type&quot;</span>\n          },\n          <span class=\"hljs-attr\">&quot;nullable&quot;</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-attr\">&quot;default&quot;</span>: <span class=\"hljs-string\">&quot;username_password&quot;</span>,\n          <span class=\"hljs-attr\">&quot;maxObjects&quot;</span>: <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-attr\">&quot;modificationPolicy&quot;</span>: <span class=\"hljs-string\">&quot;DEFAULT&quot;</span>\n        },\n        <span class=\"hljs-attr\">&quot;username&quot;</span>: {\n          <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;Username&quot;</span>,\n          <span class=\"hljs-attr\">&quot;documentation&quot;</span>: <span class=\"hljs-string\">&quot;The user must have the permissions:\\n\\n ### **General User Permissions**\\n\\n* `View Real-Time Event Monitoring Data`\\n\\n### **Administrative Permissions**\\n\\n* `Customize Application`\\n\\n* `View All Data`&quot;</span>,\n          <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;text&quot;</span>,\n          <span class=\"hljs-attr\">&quot;nullable&quot;</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-attr\">&quot;default&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n          <span class=\"hljs-attr\">&quot;constraints&quot;</span>: [\n            {\n              <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;NOT_EMPTY&quot;</span>,\n              <span class=\"hljs-attr\">&quot;customMessage&quot;</span>: <span class=\"hljs-string\">&quot;The Username must not be empty&quot;</span>\n            }\n          ],\n          <span class=\"hljs-attr\">&quot;precondition&quot;</span>: {\n            <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;EQUALS&quot;</span>,\n            <span class=\"hljs-attr\">&quot;property&quot;</span>: <span class=\"hljs-string\">&quot;authentication_type&quot;</span>,\n            <span class=\"hljs-attr\">&quot;expectedValue&quot;</span>: <span class=\"hljs-string\">&quot;username_password&quot;</span>\n          }\n        },\n        <span class=\"hljs-attr\">&quot;password&quot;</span>: {\n          <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;Password&quot;</span>,\n          <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;secret&quot;</span>,\n          <span class=\"hljs-attr\">&quot;nullable&quot;</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-attr\">&quot;default&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n          <span class=\"hljs-attr\">&quot;constraints&quot;</span>: [\n            {\n              <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;NOT_EMPTY&quot;</span>,\n              <span class=\"hljs-attr\">&quot;customMessage&quot;</span>: <span class=\"hljs-string\">&quot;The Password must not be empty&quot;</span>\n            }\n          ],\n          <span class=\"hljs-attr\">&quot;precondition&quot;</span>: {\n            <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;EQUALS&quot;</span>,\n            <span class=\"hljs-attr\">&quot;property&quot;</span>: <span class=\"hljs-string\">&quot;authentication_type&quot;</span>,\n            <span class=\"hljs-attr\">&quot;expectedValue&quot;</span>: <span class=\"hljs-string\">&quot;username_password&quot;</span>\n          }\n        }\n      }\n    }\n}\n</code></pre>\n<p>If you are inside the Dynatrace VPN, you can access Settings 2.0 <strong>documentation</strong> and  a <strong>playground</strong>:</p>\n<ul>\n<li>Documentation: <code>/ui/docs/settings-ui-docs/list</code> </li>\n<li>Playgrouynd: <code>/ui/docs/settings-playground</code></li>\n</ul>\n<p><img src=\"assets/vscode-migrate-04.png\" alt=\"vscode-migrate-04\" /></p>\n<p>The playground is quite useful to test your settings UI, and you can also copy ideas from other Dynatrace settings UIs.  </p>","activityList":[]}]},{"id":"3","name":"Migrating a real extension","content":"<h2 id=\"migratingarealextension\">Migrating a real extension</h2>\n<p>In this lab we will migrate an Activegate extension step by step.<br />\nWe will:</p>\n<ol>\n<li>Learn how to create a new python extension on the EF2 framework.  </li>\n<li>Migrate the plugin.json and extension code to the EF2 extension.  </li>\n<li>Build, sign, deploy and test our extension.  </li>\n<li>Create topology and screens</li>\n</ol>","activityList":[{"id":"3.1","name":"Create a new extension","content":"<h2 id=\"createanewextension\">Create a new extension</h2>\n<p>There are two ways of creating a new python extension.  </p>\n<ul>\n<li>Manually via the command line</li>\n<li>Using our <a href=\"https://marketplace.visualstudio.com/items?itemName=DynatracePlatformExtensions.dynatrace-extensions\">VSCode extension</a></li>\n</ul>\n<p>Both of these methods use the <a href=\"https://github.com/dynatrace-extensions/dt-extensions-python-sdk\">dt-extensions-sdk</a> package.</p>\n<h3 id=\"installthepythonextensionssdk\">Install the Python Extensions SDK</h3>\n<pre><code class=\"hljs\">pip install <span class=\"hljs-selector-tag\">dt</span>-extensions-sdk<span class=\"hljs-selector-attr\">[cli]</span>\n</code></pre>\n<pre><code class=\"hljs\">pip install <span class=\"hljs-selector-tag\">dt</span>-extensions-sdk<span class=\"hljs-selector-attr\">[cli]</span>\n</code></pre>\n<p>Note: In some shells like zsh, you may need to escape the brackets like this: <code>pip install dt-extensions-sdk\\[cli\\]</code></p>\n<p><strong>Important</strong>:</p>\n<blockquote>\n  <p><strong>Always</strong> use a python virtual environment for every extension project you have.<br />\n  This will ensure that you have the correct dependencies installed for each project.<br />\n  It will also guarantee that your system's python is not polluted with dependencies that you don't need.<br />\n  You <em>can</em> install <strong>dt-extensions-sdk[cli]</strong> globally, but you should <strong>never</strong> install your extension's dependencies globally.  </p>\n</blockquote>\n<p>On Windows, this can be done with:</p>\n<pre><code class=\"hljs\">python -m venv venv; .<span class=\"hljs-symbol\">\\v</span>env<span class=\"hljs-symbol\">\\S</span>cripts<span class=\"hljs-symbol\">\\a</span>ctivate\n</code></pre>\n<p>On Linux/MacOS, this can be done with:</p>\n<pre><code class=\"hljs\">python -m venv venv &amp;&amp; <span class=\"hljs-keyword\">source</span> venv<span class=\"hljs-regexp\">/bin/</span>activate\n</code></pre>\n<h3 id=\"vscodeextension\">VSCode extension</h3>\n<p>For this option you still need to have python and the dt-extensions-sdk installed.  </p>\n<p>Install our VSCode extension (<code>Extensions</code> &gt; Search for <code>Dynatrace Extensions</code> &gt; <code>Install</code>)   </p>\n<p>Open an empty folder and run the <code>Dynatrace extensions: Initialize workspace</code> command.  </p>\n<ul>\n<li>Choose the latest available schema version</li>\n<li>Create or use an existing certificate</li>\n<li>Choose the project type \"Python Extension 2.0\"</li>\n<li>Give the extension a name</li>\n</ul>\n<p><img src=\"assets/vscode-generate-01.png\" alt=\"vscode-generate\" /></p>\n<h3 id=\"commandline\">Command Line</h3>\n<ol>\n<li>Create certificates</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-selector-tag\">dt</span>-sdk gencerts\n</code></pre>\n<ol start=\"2\">\n<li>Create a new extension</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-selector-tag\">dt</span>-sdk create my_first_extension\n</code></pre>\n<h3 id=\"simulating\">Simulating</h3>\n<ol>\n<li>Change directory to the new extension</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-built_in\">cd</span> my_first_extension\n</code></pre>\n<ol start=\"2\">\n<li>Run the extension</li>\n</ol>\n<pre><code class=\"hljs\">dt-sdk <span class=\"hljs-builtin-name\">run</span>\n</code></pre>\n<p><img src=\"assets/dt-sdk-run.png\" alt=\"dt-sdk-run\" /></p>\n<h3 id=\"deploying\">Deploying</h3>\n<ol start=\"7\">\n<li>Build the extension</li>\n</ol>\n<pre><code class=\"hljs\">dt-sdk <span class=\"hljs-keyword\">build</span>\n# <span class=\"hljs-keyword\">If</span> <span class=\"hljs-keyword\">using</span> the vscode extension, <span class=\"hljs-keyword\">use</span> F1 -&gt; Dynatrace extensions: <span class=\"hljs-keyword\">Build</span>\n</code></pre>\n<ol start=\"8\">\n<li>Upload the extension</li>\n</ol>\n<pre><code class=\"hljs\">dt-sdk upload\n# <span class=\"hljs-keyword\">If</span> <span class=\"hljs-keyword\">using</span> the vscode <span class=\"hljs-keyword\">extension</span>, you <span class=\"hljs-keyword\">get</span> prompted <span class=\"hljs-keyword\">to</span> upload <span class=\"hljs-keyword\">after</span> building\n</code></pre>\n<p>Note, to upload from the command line you have two options:</p>\n<ol>\n<li>Set environment variables <strong>(recommended)</strong>:</li>\n</ol>\n<ul>\n<li><code>DT_API_URL</code> - Your Dynatrace tenant URL</li>\n<li><code>DT_API_TOKEN</code> - Your Dynatrace API token</li>\n</ul>\n<ol>\n<li>Pass these as arguments to <code>dt-sdk upload</code></li>\n</ol>\n<p>Note that every <code>dt-sdk</code> command can be explained with the <code>--help</code> flag:</p>\n<p><img src=\"assets/dt-sdk-upload.png\" alt=\"dt-sdk-upload\" /> </p>","activityList":[]},{"id":"3.2","name":"Plugin.json migration","content":"<h2 id=\"pluginjsonmigration\">Plugin.json migration</h2>\n<p>The <code>plugin.json</code> contains some important metadata we want to migrate.<br />\nSome of it, like the extension version, dependencies and even metric descriptions are easy to migrate to the <code>extension.yaml</code> file.<br />\nOn the other hand, migrating the <code>properties</code> to the new <code>Settings 2.0</code> properties format can take a while to get used to.  </p>\n<p>To solve the problem of migrating the <code>properties</code> section, we have added a feature to the VSCode extension that can help you automatically create the <code>activationSchema.json</code> file.  </p>\n<h3 id=\"dynatraceextensionsconvertpython\">Dynatrace extensions: Convert Python</h3>\n<p>On VSCode, press F1 (or Ctrl + Shift + P) and search for <code>Dynatrace extensions: Convert Python</code>.  </p>\n<p><img src=\"assets/vscode-migrate-02.png\" alt=\"vscode-migrate-02\" /></p>\n<p>This allows you to convert an existing extension, you have a couple of options:</p>\n<ul>\n<li>Import an extension zip file from your computer</li>\n<li>Import a plugin.json file from your computer</li>\n<li>Import an extension directly from your Dynatrace Environment</li>\n</ul>\n<p><img src=\"assets/vscode-migrate-01.png\" alt=\"vscode-migrate-01\" /></p>\n<p>In our case, we are migrating an existing extension from the filesystem, so we will choose the <code>Locally</code> option.<br />\nFind the file <code>custom.remote.python.rabbit_mq.zip</code> and chose it to be imported. </p>\n<p>After you chose an option, and the file/extension to import, you will be either:</p>\n<ol>\n<li>Asked where to save the newly generated <code>activationSchema.json</code> file (if you don't have an EF2 extension workspace opened); or</li>\n<li>Have the <code>activationSchema.json</code> written for you (if you have an EF2 extension workspace opened)</li>\n</ol>\n<p>We should already have our workspace opened, so the <code>activationSchema.json</code> file will be written for us.<br />\nLet us explore the code.  </p>\n<p>Under <code>types</code>, we have the type <code>custom_extension</code>, which has the following properties.<br />\nNode that these were extracted automatically from the <code>plugin.json</code> file. We are free to modify them as we see fit.  </p>\n<pre><code class=\"hljs json language-json\">{\n    <span class=\"hljs-attr\">&quot;rabbitmq_node&quot;</span>: {\n        <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;RabbitMQ Node&quot;</span>,\n        <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;text&quot;</span>,\n        <span class=\"hljs-attr\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;The rabbitmq management URL http://my.host:15672&quot;</span>,\n        <span class=\"hljs-attr\">&quot;nullable&quot;</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">&quot;subType&quot;</span>: <span class=\"hljs-string\">&quot;multiline&quot;</span>\n    },\n    <span class=\"hljs-attr\">&quot;rabbitmq_username&quot;</span>: {\n        <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;RabbitMQ User&quot;</span>,\n        <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;text&quot;</span>,\n        <span class=\"hljs-attr\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n        <span class=\"hljs-attr\">&quot;nullable&quot;</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-attr\">&quot;default&quot;</span>: <span class=\"hljs-string\">&quot;guest&quot;</span>\n    },\n    <span class=\"hljs-attr\">&quot;rabbitmq_password&quot;</span>: {\n        <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;RabbitMQ Password&quot;</span>,\n        <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;secret&quot;</span>,\n        <span class=\"hljs-attr\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n        <span class=\"hljs-attr\">&quot;nullable&quot;</span>: <span class=\"hljs-literal\">true</span>\n    },\n    <span class=\"hljs-attr\">&quot;queues_include&quot;</span>: {\n        <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;Queues to include&quot;</span>,\n        <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;text&quot;</span>,\n        <span class=\"hljs-attr\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;One regex expression per line, use .* to monitor all&quot;</span>,\n        <span class=\"hljs-attr\">&quot;nullable&quot;</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-attr\">&quot;default&quot;</span>: <span class=\"hljs-string\">&quot;.*&quot;</span>,\n        <span class=\"hljs-attr\">&quot;subType&quot;</span>: <span class=\"hljs-string\">&quot;multiline&quot;</span>\n    },\n    <span class=\"hljs-attr\">&quot;frequency&quot;</span>: {\n        <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;Frequency (minutes)&quot;</span>,\n        <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;integer&quot;</span>,\n        <span class=\"hljs-attr\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n        <span class=\"hljs-attr\">&quot;nullable&quot;</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-attr\">&quot;default&quot;</span>: <span class=\"hljs-number\">1</span>\n    }\n}\n</code></pre>\n<p>We also have a type called <code>pythonRemote</code><br />\nThis could have been called anything, we use it to declare a list of endpoints, which are a list of <code>custom_extension</code> types (the one from above)<br />\nWe can also modify the <code>displayName</code> and other metadata about this, like allowing a single endpoint per monitoring configuration instead of 100.    </p>\n<pre><code class=\"hljs json language-json\">{\n    <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;object&quot;</span>,\n    <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;Python Remote Extension&quot;</span>,\n    <span class=\"hljs-attr\">&quot;properties&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;endpoints&quot;</span>: {\n        <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;Endpoint&quot;</span>,\n        <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;list&quot;</span>,\n        <span class=\"hljs-attr\">&quot;items&quot;</span>: {\n        <span class=\"hljs-attr\">&quot;type&quot;</span>: {\n            <span class=\"hljs-attr\">&quot;$ref&quot;</span>: <span class=\"hljs-string\">&quot;#/types/custom_extension&quot;</span>\n        }\n        },\n        <span class=\"hljs-attr\">&quot;nullable&quot;</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-attr\">&quot;minItems&quot;</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-attr\">&quot;maxItems&quot;</span>: <span class=\"hljs-number\">100</span>,\n        <span class=\"hljs-attr\">&quot;metaData&quot;</span>: {\n        <span class=\"hljs-attr\">&quot;addItemButton&quot;</span>: <span class=\"hljs-string\">&quot;Add endpoint&quot;</span>\n        }\n    }\n    }\n}\n</code></pre>\n<p>Finally, under <code>properties</code> we have a single property called <code>pythonRemote</code>.<br />\nThis is a <strong>mandatory property</strong> for remote (activegate) extensions. For OneAgents this would be <code>pythonLocal</code>.<br />\nNote that you can also declare both on the same extension, if you want to support both Activegates and OneAgents.  </p>\n<pre><code class=\"hljs json language-json\">{\n    <span class=\"hljs-attr\">&quot;properties&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;pythonRemote&quot;</span>: {\n      <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;Python Remote Extension&quot;</span>,\n      <span class=\"hljs-attr\">&quot;type&quot;</span>: {\n        <span class=\"hljs-attr\">&quot;$ref&quot;</span>: <span class=\"hljs-string\">&quot;#/types/pythonRemote&quot;</span>\n        }\n      }\n    }\n}\n</code></pre>\n<p>If you want to learn more about this settings file, please research <code>Settings 2.0</code> internally in Dynatrace.<br />\nWhen you are on the VPN and have access as <code>Devops Viewer</code>, you can navigate to these URLs for the documentation and a playground in your Dynatrace environment:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-regexp\">/ui/</span>docs/settings-ui-docs\n<span class=\"hljs-regexp\">/ui/</span>docs/settings-playground\n</code></pre>\n<p><img src=\"assets/vscode-migrate-03.png\" alt=\"vscode-migrate-03\" /> </p>\n<p><img src=\"assets/vscode-migrate-04.png\" alt=\"vscode-migrate-04\" />  </p>\n<h3 id=\"changeextensionyaml\">Change extension.yaml</h3>\n<p>Since this is a remote extension, we should change our <code>extension.yaml</code> file, removing the <code>activation &gt; local</code> entry, so that our extension can only run on Activegates.<br />\nYou can comment or delete the lines. Please realize how you could even have different <code>activationSchema.json</code> files for different activation types.  </p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">custom:rabbitmq-extension</span>\n<span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.1</span>\n<span class=\"hljs-attr\">minDynatraceVersion:</span> <span class=\"hljs-string\">&quot;1.253&quot;</span>\n<span class=\"hljs-attr\">author:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">&quot;Dynatrace&quot;</span>\n\n<span class=\"hljs-attr\">python:</span>\n  <span class=\"hljs-attr\">runtime:</span>\n    <span class=\"hljs-attr\">module:</span> <span class=\"hljs-string\">rabbitmq_extension</span>\n    <span class=\"hljs-attr\">version:</span>\n      <span class=\"hljs-attr\">min:</span> <span class=\"hljs-string\">&quot;3.9&quot;</span>\n\n  <span class=\"hljs-attr\">activation:</span>\n    <span class=\"hljs-attr\">remote:</span>\n      <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">activationSchema.json</span>\n    <span class=\"hljs-comment\"># local:</span>\n    <span class=\"hljs-comment\">#   path: activationSchema.json</span>\n</code></pre>\n<h3 id=\"buildandactivate\">Build and activate</h3>\n<p>To test that our settings 2.0 works as expected, let's build and activate our extension.<br />\nFron the VSCode command palette, run the <code>Dynatrace extensions: Build</code> command and accept the prompts to upload the extension to Dynatrace.  </p>\n<p>Navigate to Dynatrace, and create a new monitoring configuration for our extension.  </p>\n<p>You should see a screen similar to this one:</p>\n<p><img src=\"assets/vscode-migrate-05.png\" alt=\"vscode-migrate-05\" />  </p>\n<p>We can copy the <code>value</code> from the <strong>JSON</strong> snippet on the right side and adapt it to our RabbitMQ instance:</p>\n<pre><code class=\"hljs json language-json\">{\n    <span class=\"hljs-attr\">&quot;enabled&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n    <span class=\"hljs-attr\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;0.0.1&quot;</span>,\n    <span class=\"hljs-attr\">&quot;pythonRemote&quot;</span>: {\n      <span class=\"hljs-attr\">&quot;endpoints&quot;</span>: [\n        {\n          <span class=\"hljs-attr\">&quot;rabbitmq_node&quot;</span>: <span class=\"hljs-string\">&quot;https://b-d9835915-0721-47f1-994c-b43c7b6dd800.mq.us-east-1.amazonaws.com&quot;</span>,\n          <span class=\"hljs-attr\">&quot;rabbitmq_username&quot;</span>: <span class=\"hljs-string\">&quot;dynatrace&quot;</span>,\n          <span class=\"hljs-attr\">&quot;rabbitmq_password&quot;</span>: <span class=\"hljs-string\">&quot;password&quot;</span>,\n          <span class=\"hljs-attr\">&quot;queues_include&quot;</span>: <span class=\"hljs-string\">&quot;.*&quot;</span>,\n          <span class=\"hljs-attr\">&quot;frequency&quot;</span>: <span class=\"hljs-number\">1</span>\n        }\n      ]\n    }\n}\n</code></pre>\n<p>Paste this content into the <code>activation.json</code> file, and save it.  </p>","activityList":[]},{"id":"3.3","name":"Code migration","content":"<h2 id=\"codemigration\">Code migration</h2>\n<p>The code migration is a bit manual for now. We are working on automating this further.  </p>\n<p>A reminder of the most important changes:</p>\n<table>\n<thead>\n<tr>\n<th>Description</th>\n<th>EF1 method</th>\n<th>EF2 method</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Logging</td>\n<td><code>self.logger.info(\"message\")</code></td>\n<td><code>self.logger.info(\"message\")</code></td>\n<td>Stays the same</td>\n</tr>\n<tr>\n<td>Obtaining user defined parameters</td>\n<td><code>self.config.get(\"param_name\", \"default_value\")</code></td>\n<td><code>self.activation_config.get(\"param_name\", \"default_value\")</code></td>\n<td>You can find and replace all <code>self.config.</code> entries with <code>self.activation_config.</code></td>\n</tr>\n<tr>\n<td>Report an event</td>\n<td><code>self.results_builder.report_custom_info_event</code></td>\n<td><code>self.report_dt_event</code></td>\n<td>Try to keep topology (groups, device, IDs) out of the code, this is defined later in the <code>extension.yaml</code> file.</td>\n</tr>\n<tr>\n<td>Report a metric</td>\n<td><code>device.absolute(\"metric_key\", metric_value, {\"dimension_name\": \"dimension_value\"})</code></td>\n<td><code>self.report_metric(\"metric_key\", metric_value, {\"dimension_name\": \"dimension_value\"})</code></td>\n<td>There is no concept of a <code>device</code> in the python code anymore, send metrics directly.</td>\n</tr>\n<tr>\n<td>Create groups and custom devices</td>\n<td><code>self.topology_builder.create_group</code>, <code>group.create_device</code></td>\n<td>n/a</td>\n<td>Doesn't exist, topology is defined in the <code>extension.yaml</code> file.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"rabbitmqcodemigration\">RabbitMQ Code Migration</h3>\n<p>Let's look at the existing extension code, and annotate the changes we need to make.  </p>\n<pre><code class=\"hljs python language-python\"><span class=\"hljs-keyword\">import</span> re\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> Dict\n\n\n<span class=\"hljs-comment\"># TODO - These imports no longer exist, we can remove them</span>\n<span class=\"hljs-comment\"># The editor will tell us what broke</span>\n<span class=\"hljs-keyword\">from</span> ruxit.api.base_plugin <span class=\"hljs-keyword\">import</span> RemoteBasePlugin\n<span class=\"hljs-keyword\">from</span> ruxit.api.selectors <span class=\"hljs-keyword\">import</span> ExplicitSelector, EntityType\n<span class=\"hljs-keyword\">from</span> ruxit.api.topology_builder <span class=\"hljs-keyword\">import</span> Device\n\n<span class=\"hljs-keyword\">from</span> rabbitmq_api <span class=\"hljs-keyword\">import</span> RabbitMQClient\n\n\n<span class=\"hljs-comment\"># TODO - This class can stay, but it will inherit from Extension instead of RemoteBasePlugin</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RabbitMQExtension</span>(<span class=\"hljs-params\">RemoteBasePlugin</span>):</span>\n\n    <span class=\"hljs-comment\"># This can stay, although it is not necessary to count executions anymore</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span>(<span class=\"hljs-params\">self, **kwargs</span>):</span>\n        self.executions = -<span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># This can also stay!</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">query</span>(<span class=\"hljs-params\">self, **kwargs</span>) -&gt; <span class=\"hljs-keyword\">None</span>:</span>\n        self.executions += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># Step 1 - Get configuration parameters from the UI</span>\n        <span class=\"hljs-comment\"># TODO - We get a list of endpoints, so we need a for loop here.</span>\n        <span class=\"hljs-comment\"># TODO - Replace self.config with self.activation_config</span>\n        node_address = self.config.get(<span class=\"hljs-string\">&quot;rabbitmq_node&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>)\n        username = self.config.get(<span class=\"hljs-string\">&quot;rabbitmq_username&quot;</span>, <span class=\"hljs-string\">&quot;guest&quot;</span>)\n        password = self.config.get(<span class=\"hljs-string\">&quot;rabbitmq_password&quot;</span>, <span class=\"hljs-string\">&quot;guest&quot;</span>)\n        queues_include = self.config.get(<span class=\"hljs-string\">&quot;queues_include&quot;</span>, <span class=\"hljs-string\">&quot;.*&quot;</span>).split(<span class=\"hljs-string\">&quot;/n&quot;</span>)\n        frequency = self.config.get(<span class=\"hljs-string\">&quot;frequency&quot;</span>, <span class=\"hljs-number\">1</span>)\n\n        <span class=\"hljs-comment\"># The user can choose the frequency of the plugin execution</span>\n        <span class=\"hljs-comment\"># We need this workaround (counting the number of times the query method is executed)</span>\n        <span class=\"hljs-comment\"># NOTE - We can ask the frequency directly to the user in EF2</span>\n        <span class=\"hljs-keyword\">if</span> self.executions % frequency == <span class=\"hljs-number\">0</span>:\n\n            <span class=\"hljs-comment\"># This is topology, create a CUSTOM_DEVICE_GROUP</span>\n            <span class=\"hljs-comment\"># TODO - Remove this</span>\n            group = self.topology_builder.create_group(<span class=\"hljs-string\">&quot;Rabbit MQ Group&quot;</span>, <span class=\"hljs-string\">&quot;Rabbit MQ Group&quot;</span>)\n\n            <span class=\"hljs-comment\"># This is a check, we are trying to connect to RabbitMQ</span>\n            rabbit = RabbitMQClient(node_address, username, password, logger=self.logger)\n            <span class=\"hljs-keyword\">try</span>:\n                _ = rabbit.cluster\n                self.logger.info(<span class=\"hljs-string\">f&quot;Successfully connected to <span class=\"hljs-subst\">{node_address}</span>&quot;</span>)\n            <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n                error_message = <span class=\"hljs-string\">f&quot;Could not connect to RabbitMQ node <span class=\"hljs-subst\">{node_address}</span>&quot;</span>\n\n                <span class=\"hljs-comment\"># TODO - Replace this with self.report_dt_event</span>\n                self.results_builder.report_error_event(error_message, <span class=\"hljs-string\">&quot;RabbitMQ connection issue&quot;</span>, entity_selector=ExplicitSelector(group.<span class=\"hljs-built_in\">id</span>, EntityType.CUSTOM_DEVICE_GROUP))\n                self.logger.error(error_message)\n                <span class=\"hljs-keyword\">raise</span> Exception(error_message) <span class=\"hljs-keyword\">from</span> e\n\n            <span class=\"hljs-comment\"># This is also topology, we need to create CUSTOM_DEVICE manually</span>\n            <span class=\"hljs-comment\"># TODO - Remove this</span>\n            nodes: Dict[<span class=\"hljs-built_in\">str</span>, Device] = {}\n            <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> rabbit.nodes:\n                nodes[node.name] = group.create_device(<span class=\"hljs-string\">f&quot;RabbitMQ Node <span class=\"hljs-subst\">{node.name}</span>&quot;</span>)\n\n            <span class=\"hljs-comment\"># Report the queue metrics</span>\n            <span class=\"hljs-keyword\">for</span> queue <span class=\"hljs-keyword\">in</span> rabbit.queues:\n                self.logger.info(<span class=\"hljs-string\">f&quot;Checking queue &#x27;<span class=\"hljs-subst\">{queue.name}</span>&#x27;&quot;</span>)\n                monitor = <span class=\"hljs-literal\">False</span>\n\n                <span class=\"hljs-keyword\">for</span> pattern <span class=\"hljs-keyword\">in</span> queues_include:\n                    <span class=\"hljs-keyword\">if</span> pattern <span class=\"hljs-keyword\">and</span> re.match(pattern, queue.name):\n                        self.logger.info(<span class=\"hljs-string\">f&quot;Adding queue &#x27;<span class=\"hljs-subst\">{queue.name}</span>&#x27; because it matched the pattern &#x27;<span class=\"hljs-subst\">{pattern}</span>&#x27;&quot;</span>)\n                        monitor = <span class=\"hljs-literal\">True</span>\n\n                <span class=\"hljs-keyword\">if</span> monitor: \n                    <span class=\"hljs-comment\"># TODO - We don&#x27;t need to use the device anymore</span>\n                    device = nodes.get(queue.node)\n\n                    <span class=\"hljs-comment\"># TODO - Replace these with self.report_metric</span>\n                    device.absolute(<span class=\"hljs-string\">&quot;messages_ready&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;VirtualHost&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;Queue&quot;</span>: queue.name})\n                    device.absolute(<span class=\"hljs-string\">&quot;messages_unacknowledged&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;VirtualHost&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;Queue&quot;</span>: queue.name})\n                    device.absolute(<span class=\"hljs-string\">&quot;messages_ack&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;VirtualHost&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;Queue&quot;</span>: queue.name})\n                    device.absolute(<span class=\"hljs-string\">&quot;messages_deliver_get&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;VirtualHost&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;Queue&quot;</span>: queue.name})\n                    device.absolute(<span class=\"hljs-string\">&quot;messages_publish&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;VirtualHost&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;Queue&quot;</span>: queue.name})\n                    device.absolute(<span class=\"hljs-string\">&quot;messages_redeliver&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;VirtualHost&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;Queue&quot;</span>: queue.name})\n                    device.absolute(<span class=\"hljs-string\">&quot;messages_return&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;VirtualHost&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;Queue&quot;</span>: queue.name})\n\n<span class=\"hljs-comment\"># TODO - At the very end we have to call the main method </span>\n<span class=\"hljs-comment\"># This should already be present in the EF2 code</span>\n</code></pre>\n<h3 id=\"fixingerrors\">Fixing errors</h3>\n<p>Start by copying the entire EF1 class and overwriting the code in the <code>__main__.py</code> file.<br />\nKeep the last lines which run the extension.  </p>\n<p>You should receive some errors and warnings from the editor, and we will fix them one by one.  </p>\n<p><img src=\"assets/code-migrate-01.png\" alt=\"code-migrate-01\" /></p>\n<h4 id=\"imports\">Imports</h4>\n<p>Our code depends on a file called <code>rabbitmq_api.py</code>, which is not present in the EF2 extension.<br />\nCopy that file to the same directory as the <code>__main__.py</code> file.  Since this file has no dependencies, it should work as is.  </p>\n<p>There are several <code>ruxit</code> dependencies from the framework V1, you can always remove them all, delete all lines that start with <code>from ruxit</code>.</p>\n<p>All extensions extend from the <code>Extension</code> class, let's import that class and update the class definition.<br />\nWe also should import <code>rabbitmq_api</code> with a relative import using a <code>.</code>, we are a module now and not a standalone file.  </p>\n<pre><code class=\"hljs python language-python\"><span class=\"hljs-keyword\">import</span> re\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> Dict\n\n<span class=\"hljs-keyword\">from</span> dynatrace_extension <span class=\"hljs-keyword\">import</span> Extension <span class=\"hljs-comment\"># We added this line</span>\n\n<span class=\"hljs-keyword\">from</span> .rabbitmq_api <span class=\"hljs-keyword\">import</span> RabbitMQClient <span class=\"hljs-comment\"># We changed this line</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RabbitMQExtension</span>(<span class=\"hljs-params\">Extension</span>):</span> <span class=\"hljs-comment\"># We changed this line</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span>(<span class=\"hljs-params\">self, **kwargs</span>):</span>\n        self.executions = -<span class=\"hljs-number\">1</span>\n</code></pre>\n<p>Try to run the extension now, the error output will tell us what is wrong.  </p>\n<p><img src=\"assets/code-migrate-02.png\" alt=\"code-migrate-02\" /></p>\n<p>Change the <code>main</code> definition, the class name is RabbitMQExtension.  </p>\n<blockquote>\n  <p>Note, you could have also changed the class name to be <code>ExtensionImpl</code>, it doesn't affect the extension.  </p>\n</blockquote>\n<pre><code class=\"hljs python language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span>\n    RabbitMQExtension().run()\n</code></pre>\n<h4 id=\"highlightingerrors\">Highlighting errors</h4>\n<p>You have a couple of options to highlight the errors in the code.  </p>\n<ol>\n<li>Run <code>dt-sdk run</code></li>\n</ol>\n<p>This will run the extension and highlight the errors in the code, only if they raise an Exception. </p>\n<ol start=\"2\">\n<li>Install a linter, like <code>Pylint</code> or <code>Ruff</code></li>\n</ol>\n<p>They will point out errors in the code, and are a bit more strict than the <code>dt-sdk run</code> command.<br />\nThese tools do code analysis, and let us know of things that are incorrect, example:</p>\n<p><img src=\"assets/code-migrate-03.png\" alt=\"code-migrate-03\" /></p>\n<p>Note that these tools will also suggest some code changes that we might not agree with or don't care right now.<br />\nYou can ignore the warning and information messages, and focus on the errors.  </p>\n<p><img src=\"assets/code-migrate-04.png\" alt=\"code-migrate-04\" /></p>\n<p>The Problems tab in vscode should also show the errors.  </p>\n<p><img src=\"assets/code-migrate-05.png\" alt=\"code-migrate-05\" /></p>\n<p>I suggest starting with <code>PyLint</code>, install the PyLint extension in VSCode.</p>\n<h4 id=\"fixingendpoints\">Fixing endpoints</h4>\n<p>In EF1, every execution of the query method happened in a single endpoint.<br />\nIn EF2 you have freedom to decide how the user can configure the extension.<br />\nFor instance, they can monitor multiple RabbitMQ servers in a single monitoring configuration.<br />\nOur extension allows up to 100 endpoints, so we need to loop through the endpoint configurations. </p>\n<p>Add a line to obtain the endpoints, and then loop through them.<br />\nReplace the <code>self.config</code> with the <code>endpoint</code> instances.<br />\nIf you are confused as to why this is needed, this comes from what we defined in the <code>activationSchema.json</code> file.   </p>\n<pre><code class=\"hljs python language-python\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">query</span>(<span class=\"hljs-params\">self, **kwargs</span>) -&gt; <span class=\"hljs-keyword\">None</span>:</span>\n        self.executions += <span class=\"hljs-number\">1</span>\n\n        endpoints = self.activation_config.get(<span class=\"hljs-string\">&quot;endpoints&quot;</span>)\n        <span class=\"hljs-keyword\">for</span> endpoint <span class=\"hljs-keyword\">in</span> endpoints:\n\n            <span class=\"hljs-comment\"># Step 1 - Get configuration parameters from the UI</span>\n            node_address = endpoint.get(<span class=\"hljs-string\">&quot;rabbitmq_node&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>)\n            username = endpoint.get(<span class=\"hljs-string\">&quot;rabbitmq_username&quot;</span>, <span class=\"hljs-string\">&quot;guest&quot;</span>)\n            password = endpoint.get(<span class=\"hljs-string\">&quot;rabbitmq_password&quot;</span>, <span class=\"hljs-string\">&quot;guest&quot;</span>)\n            queues_include = endpoint.get(<span class=\"hljs-string\">&quot;queues_include&quot;</span>, <span class=\"hljs-string\">&quot;.*&quot;</span>).split(<span class=\"hljs-string\">&quot;/n&quot;</span>)\n            frequency = endpoint.get(<span class=\"hljs-string\">&quot;frequency&quot;</span>, <span class=\"hljs-number\">1</span>)\n</code></pre>\n<blockquote>\n  <p>Remember, you could also have chosen to only allow a single endpoint, this is up to the developer to decide.  </p>\n</blockquote>\n<h4 id=\"removetopologygroupsanddevices\">Remove topology (groups and devices)</h4>\n<p>All the topology in EF2 is declared from metric lines.<br />\nThis means we don't create devices and groups in the code. </p>\n<p>Remove the line that creates a group, and update the event reporting to use the <code>self.report_dt_event</code> method.  </p>\n<pre><code class=\"hljs\">    <span class=\"hljs-keyword\">if</span> self.executions % frequency<span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">0</span>:\n\n        # Removed this line\n        # group = self.topology_builder.create<span class=\"hljs-constructor\">_group(<span class=\"hljs-string\">&quot;Rabbit MQ Group&quot;</span>, <span class=\"hljs-string\">&quot;Rabbit MQ Group&quot;</span>)</span>\n\n        # This is a check, we are trying <span class=\"hljs-keyword\">to</span> connect <span class=\"hljs-keyword\">to</span> RabbitMQ\n        rabbit = <span class=\"hljs-constructor\">RabbitMQClient(<span class=\"hljs-params\">node_address</span>, <span class=\"hljs-params\">username</span>, <span class=\"hljs-params\">password</span>, <span class=\"hljs-params\">logger</span>=<span class=\"hljs-params\">self</span>.<span class=\"hljs-params\">logger</span>)</span>\n        <span class=\"hljs-keyword\">try</span>:\n            _ = rabbit.cluster\n            self.logger.info(f<span class=\"hljs-string\">&quot;Successfully connected to {node_address}&quot;</span>)\n        except Exception <span class=\"hljs-keyword\">as</span> e:\n            error_message = f<span class=\"hljs-string\">&quot;Could not connect to RabbitMQ node {node_address}&quot;</span>\n\n            # Remove this line\n            #  # self.results_builder.report<span class=\"hljs-constructor\">_error_event(<span class=\"hljs-params\">error_message</span>, <span class=\"hljs-string\">&quot;RabbitMQ connection issue&quot;</span>, <span class=\"hljs-params\">entity_selector</span>=ExplicitSelector(<span class=\"hljs-params\">group</span>.<span class=\"hljs-params\">id</span>, EntityType.CUSTOM_DEVICE_GROUP)</span>)\n            self.report<span class=\"hljs-constructor\">_dt_event(DtEventType.ERROR_EVENT, <span class=\"hljs-params\">error_message</span>)</span> # Replace it <span class=\"hljs-keyword\">with</span> this line\n\n            self.logger.error(error_message)\n            raise <span class=\"hljs-constructor\">Exception(<span class=\"hljs-params\">error_message</span>)</span> from e\n</code></pre>\n<p>For this code to work, import the <code>DtEventType</code> enum from the <code>dynatrace_extension</code> module.  </p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">from</span> dynatrace_extension <span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">Extension</span>\n\n<span class=\"hljs-keyword\">from</span> dynatrace_extension.sdk.<span class=\"hljs-keyword\">extension</span> <span class=\"hljs-keyword\">import</span> DtEventType\n</code></pre>\n<p>We don't need to create Custom Devices anymore, so this loop can be removed altogether:</p>\n<pre><code class=\"hljs\">    <span class=\"hljs-comment\"># This is also topology, we need to create CUSTOM_DEVICE manually</span>\n    nodes: Dict[str, Device] = {}\n    for <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">in</span> rabbit.nodes:\n        nodes[node.name] = group.create_device(f<span class=\"hljs-string\">&quot;RabbitMQ Node {node.name}&quot;</span>)\n</code></pre>\n<h4 id=\"fixmetricreporting\">Fix metric reporting</h4>\n<p>Finally, we don't need a custom device to report metrics, so the metric reporting code will change:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">if</span> monitor:\n    device = nodes.<span class=\"hljs-built_in\">get</span>(<span class=\"hljs-built_in\">queue</span>.node)\n    device.absolute(<span class=\"hljs-string\">&quot;messages_ready&quot;</span>,  <span class=\"hljs-built_in\">queue</span>.messages_ready, dimensions={<span class=\"hljs-string\">&quot;VirtualHost&quot;</span>: <span class=\"hljs-built_in\">queue</span>.vhost, <span class=\"hljs-string\">&quot;Queue&quot;</span>: <span class=\"hljs-built_in\">queue</span>.name})\n    device.absolute(<span class=\"hljs-string\">&quot;messages_unacknowledged&quot;</span>,  <span class=\"hljs-built_in\">queue</span>.messages_ready, dimensions={<span class=\"hljs-string\">&quot;VirtualHost&quot;</span>: <span class=\"hljs-built_in\">queue</span>.vhost, <span class=\"hljs-string\">&quot;Queue&quot;</span>: <span class=\"hljs-built_in\">queue</span>.name})\n    device.absolute(<span class=\"hljs-string\">&quot;messages_ack&quot;</span>,  <span class=\"hljs-built_in\">queue</span>.messages_ready, dimensions={<span class=\"hljs-string\">&quot;VirtualHost&quot;</span>: <span class=\"hljs-built_in\">queue</span>.vhost, <span class=\"hljs-string\">&quot;Queue&quot;</span>: <span class=\"hljs-built_in\">queue</span>.name})\n    device.absolute(<span class=\"hljs-string\">&quot;messages_deliver_get&quot;</span>,  <span class=\"hljs-built_in\">queue</span>.messages_ready, dimensions={<span class=\"hljs-string\">&quot;VirtualHost&quot;</span>: <span class=\"hljs-built_in\">queue</span>.vhost, <span class=\"hljs-string\">&quot;Queue&quot;</span>: <span class=\"hljs-built_in\">queue</span>.name})\n    device.absolute(<span class=\"hljs-string\">&quot;messages_publish&quot;</span>,  <span class=\"hljs-built_in\">queue</span>.messages_ready, dimensions={<span class=\"hljs-string\">&quot;VirtualHost&quot;</span>: <span class=\"hljs-built_in\">queue</span>.vhost, <span class=\"hljs-string\">&quot;Queue&quot;</span>: <span class=\"hljs-built_in\">queue</span>.name})\n    device.absolute(<span class=\"hljs-string\">&quot;messages_redeliver&quot;</span>,  <span class=\"hljs-built_in\">queue</span>.messages_ready, dimensions={<span class=\"hljs-string\">&quot;VirtualHost&quot;</span>: <span class=\"hljs-built_in\">queue</span>.vhost, <span class=\"hljs-string\">&quot;Queue&quot;</span>: <span class=\"hljs-built_in\">queue</span>.name})\n    device.absolute(<span class=\"hljs-string\">&quot;messages_return&quot;</span>,  <span class=\"hljs-built_in\">queue</span>.messages_ready, dimensions={<span class=\"hljs-string\">&quot;VirtualHost&quot;</span>: <span class=\"hljs-built_in\">queue</span>.vhost, <span class=\"hljs-string\">&quot;Queue&quot;</span>: <span class=\"hljs-built_in\">queue</span>.name})\n</code></pre>\n<p>Becomes:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">if</span> monitor:\n    self.report<span class=\"hljs-constructor\">_metric(<span class=\"hljs-string\">&quot;messages_ready&quot;</span>,  <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">messages_ready</span>, <span class=\"hljs-params\">dimensions</span>={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">vhost</span>, <span class=\"hljs-string\">&quot;queue&quot;</span>: <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">name</span>})</span>\n    self.report<span class=\"hljs-constructor\">_metric(<span class=\"hljs-string\">&quot;messages_unacknowledged&quot;</span>,  <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">messages_ready</span>, <span class=\"hljs-params\">dimensions</span>={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">vhost</span>, <span class=\"hljs-string\">&quot;queue&quot;</span>: <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">name</span>})</span>\n    self.report<span class=\"hljs-constructor\">_metric(<span class=\"hljs-string\">&quot;messages_ack&quot;</span>,  <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">messages_ready</span>, <span class=\"hljs-params\">dimensions</span>={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">vhost</span>, <span class=\"hljs-string\">&quot;queue&quot;</span>: <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">name</span>})</span>\n    self.report<span class=\"hljs-constructor\">_metric(<span class=\"hljs-string\">&quot;messages_deliver_get&quot;</span>,  <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">messages_ready</span>, <span class=\"hljs-params\">dimensions</span>={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">vhost</span>, <span class=\"hljs-string\">&quot;queue&quot;</span>: <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">name</span>})</span>\n    self.report<span class=\"hljs-constructor\">_metric(<span class=\"hljs-string\">&quot;messages_publish&quot;</span>,  <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">messages_ready</span>, <span class=\"hljs-params\">dimensions</span>={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">vhost</span>, <span class=\"hljs-string\">&quot;queue&quot;</span>: <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">name</span>})</span>\n    self.report<span class=\"hljs-constructor\">_metric(<span class=\"hljs-string\">&quot;messages_redeliver&quot;</span>,  <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">messages_ready</span>, <span class=\"hljs-params\">dimensions</span>={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">vhost</span>, <span class=\"hljs-string\">&quot;queue&quot;</span>: <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">name</span>})</span>\n    self.report<span class=\"hljs-constructor\">_metric(<span class=\"hljs-string\">&quot;messages_return&quot;</span>,  <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">messages_ready</span>, <span class=\"hljs-params\">dimensions</span>={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">vhost</span>, <span class=\"hljs-string\">&quot;queue&quot;</span>: <span class=\"hljs-params\">queue</span>.<span class=\"hljs-params\">name</span>})</span>\n</code></pre>\n<p>Note, dimension keys <a href=\"https://docs.dynatrace.com/docs/shortlink/metric-ingestion-protocol#dimension\">must be lowercase in MINT</a>.<br />\nWith all these changes, the code should look something like this:</p>\n<pre><code class=\"hljs\">import re\n<span class=\"hljs-keyword\">from</span> typing import Dict\n\n<span class=\"hljs-keyword\">from</span> dynatrace_extension import Extension\n<span class=\"hljs-keyword\">from</span> dynatrace_extension.sdk.extension import DtEventType\n\n<span class=\"hljs-keyword\">from</span> .rabbitmq_api import RabbitMQClient\n\nclass RabbitMQExtension(Extension):\n\n    def initialize(<span class=\"hljs-literal\">self</span>, **kwargs):\n        <span class=\"hljs-literal\">self</span>.executions = -<span class=\"hljs-number\">1</span>\n\n    def query(<span class=\"hljs-literal\">self</span>, **kwargs) -&gt; None:\n        <span class=\"hljs-literal\">self</span>.executions += <span class=\"hljs-number\">1</span>\n\n        endpoints = <span class=\"hljs-literal\">self</span>.activation_config.get(<span class=\"hljs-string\">&quot;endpoints&quot;</span>)\n        <span class=\"hljs-keyword\">for</span> endpoint <span class=\"hljs-keyword\">in</span> endpoints:\n\n            <span class=\"hljs-comment\"># Step 1 - Get configuration parameters from the UI</span>\n            node_address = endpoint.get(<span class=\"hljs-string\">&quot;rabbitmq_node&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>)\n            username = endpoint.get(<span class=\"hljs-string\">&quot;rabbitmq_username&quot;</span>, <span class=\"hljs-string\">&quot;guest&quot;</span>)\n            password = endpoint.get(<span class=\"hljs-string\">&quot;rabbitmq_password&quot;</span>, <span class=\"hljs-string\">&quot;guest&quot;</span>)\n            queues_include = endpoint.get(<span class=\"hljs-string\">&quot;queues_include&quot;</span>, <span class=\"hljs-string\">&quot;.*&quot;</span>).split(<span class=\"hljs-string\">&quot;/n&quot;</span>)\n            frequency = endpoint.get(<span class=\"hljs-string\">&quot;frequency&quot;</span>, <span class=\"hljs-number\">1</span>)\n\n            <span class=\"hljs-comment\"># The user can choose the frequency of the plugin execution</span>\n            <span class=\"hljs-comment\"># We need this workaround (counting the number of times the query method is executed)</span>\n            if <span class=\"hljs-literal\">self</span>.executions % frequency == <span class=\"hljs-number\">0</span>:\n\n                <span class=\"hljs-comment\"># This is topology, create a CUSTOM_DEVICE_GROUP</span>\n                <span class=\"hljs-comment\"># group = self.topology_builder.create_group(&quot;Rabbit MQ Group&quot;, &quot;Rabbit MQ Group&quot;)</span>\n\n                <span class=\"hljs-comment\"># This is a check, we are trying to connect to RabbitMQ</span>\n                rabbit = RabbitMQClient(node_address, username, password, logger=<span class=\"hljs-literal\">self</span>.logger)\n                try:\n                    _ = rabbit.cluster\n                    <span class=\"hljs-literal\">self</span>.logger.info(f<span class=\"hljs-string\">&quot;Successfully connected to {node_address}&quot;</span>)\n                except Exception as e:\n                    error_message = f<span class=\"hljs-string\">&quot;Could not connect to RabbitMQ node {node_address}&quot;</span>\n                    <span class=\"hljs-literal\">self</span>.report_dt_event(DtEventType.ERROR_EVENT, error_message)\n                    <span class=\"hljs-literal\">self</span>.logger.error(error_message)\n                    raise Exception(error_message) <span class=\"hljs-keyword\">from</span> e\n\n                <span class=\"hljs-comment\"># Report the queue metrics</span>\n                <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">queue</span> <span class=\"hljs-keyword\">in</span> rabbit.queues:\n                    <span class=\"hljs-literal\">self</span>.logger.info(f<span class=\"hljs-string\">&quot;Checking queue &#x27;{queue.name}&#x27;&quot;</span>)\n                    monitor = False\n\n                    <span class=\"hljs-keyword\">for</span> pattern <span class=\"hljs-keyword\">in</span> queues_include:\n                        if pattern and re.<span class=\"hljs-built_in\">match</span>(pattern, <span class=\"hljs-keyword\">queue</span>.name):\n                            <span class=\"hljs-literal\">self</span>.logger.info(f<span class=\"hljs-string\">&quot;Adding queue &#x27;{queue.name}&#x27; because it matched the pattern &#x27;{pattern}&#x27;&quot;</span>)\n                            monitor = True\n\n                    if monitor:\n                        <span class=\"hljs-literal\">self</span>.report_metric(<span class=\"hljs-string\">&quot;messages_ready&quot;</span>,  <span class=\"hljs-keyword\">queue</span>.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: <span class=\"hljs-keyword\">queue</span>.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: <span class=\"hljs-keyword\">queue</span>.name})\n                        <span class=\"hljs-literal\">self</span>.report_metric(<span class=\"hljs-string\">&quot;messages_unacknowledged&quot;</span>,  <span class=\"hljs-keyword\">queue</span>.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: <span class=\"hljs-keyword\">queue</span>.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: <span class=\"hljs-keyword\">queue</span>.name})\n                        <span class=\"hljs-literal\">self</span>.report_metric(<span class=\"hljs-string\">&quot;messages_ack&quot;</span>,  <span class=\"hljs-keyword\">queue</span>.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: <span class=\"hljs-keyword\">queue</span>.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: <span class=\"hljs-keyword\">queue</span>.name})\n                        <span class=\"hljs-literal\">self</span>.report_metric(<span class=\"hljs-string\">&quot;messages_deliver_get&quot;</span>,  <span class=\"hljs-keyword\">queue</span>.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: <span class=\"hljs-keyword\">queue</span>.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: <span class=\"hljs-keyword\">queue</span>.name})\n                        <span class=\"hljs-literal\">self</span>.report_metric(<span class=\"hljs-string\">&quot;messages_publish&quot;</span>,  <span class=\"hljs-keyword\">queue</span>.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: <span class=\"hljs-keyword\">queue</span>.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: <span class=\"hljs-keyword\">queue</span>.name})\n                        <span class=\"hljs-literal\">self</span>.report_metric(<span class=\"hljs-string\">&quot;messages_redeliver&quot;</span>,  <span class=\"hljs-keyword\">queue</span>.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: <span class=\"hljs-keyword\">queue</span>.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: <span class=\"hljs-keyword\">queue</span>.name})\n                        <span class=\"hljs-literal\">self</span>.report_metric(<span class=\"hljs-string\">&quot;messages_return&quot;</span>,  <span class=\"hljs-keyword\">queue</span>.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: <span class=\"hljs-keyword\">queue</span>.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: <span class=\"hljs-keyword\">queue</span>.name})\n\n\ndef main():\n    RabbitMQExtension().run()\n\n\n\nif __name__ == &#x27;__main__&#x27;:\n    main()\n</code></pre>\n<p>Running the extension should give us an unauthorized error, since we are using the default credentials.  </p>\n<p><img src=\"assets/code-migrate-06.png\" alt=\"code-migrate-06\" /></p>\n<p>Fixing the password in the <strong>activation.json</strong> file should fix the error.  </p>\n<p><img src=\"assets/code-migrate-07.png\" alt=\"code-migrate-07\" /></p>\n<h4 id=\"migratingdependencies\">Migrating dependencies</h4>\n<p>Our code has a dependency on the <strong>requests</strong> library.<br />\nIn EF1 some third party libraries came included with the <strong>Remote Plugin Module</strong>, in EF2 this is no longer the case.<br />\nEdit the <code>setup.py</code> file and add the <code>requests</code> library to the <code>install_requires</code> list.  </p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">from</span> setuptools import setup, find_packages\n\nsetup(<span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">&quot;rabbitmq_extension&quot;</span>,\n      <span class=\"hljs-attribute\">version</span>=<span class=\"hljs-string\">&quot;0.0.1&quot;</span>,\n      <span class=\"hljs-attribute\">description</span>=<span class=\"hljs-string\">&quot;Rabbitmq_extension python EF2 extension&quot;</span>,\n      <span class=\"hljs-attribute\">author</span>=<span class=\"hljs-string\">&quot;Dynatrace&quot;</span>,\n      <span class=\"hljs-attribute\">packages</span>=find_packages(),\n      <span class=\"hljs-attribute\">python_requires</span>=<span class=\"hljs-string\">&quot;&gt;=3.10&quot;</span>,\n      <span class=\"hljs-attribute\">include_package_data</span>=<span class=\"hljs-literal\">True</span>,\n      install_requires=[<span class=\"hljs-string\">&quot;dt-extensions-sdk&quot;</span>, <span class=\"hljs-string\">&quot;requests&quot;</span>],\n      extras_require={<span class=\"hljs-string\">&quot;dev&quot;</span>: [<span class=\"hljs-string\">&quot;dt-extensions-sdk[cli]&quot;</span>]},\n      )\n</code></pre>\n<p>We should now be able to build the extension and upload it to Dynatrace.<br />\nThe <code>Build</code> command automatically increases the version number, so we don't need to change it.<br />\nRemember that you could also do this manually, by running the command <code>dt-sdk build</code> in the terminal.  </p>\n<p>To actually deploy this to an Activegate:</p>\n<h3 id=\"deploytheextension\">Deploy the extension</h3>\n<ol>\n<li>Make sure that the Activegate <a href=\"https://docs.dynatrace.com/docs/extend-dynatrace/extensions20/sign-extension#upload\">trusts your certificate</a>.  </li>\n<li>Create a monitoring configuration for the extension.  </li>\n</ol>\n<p>There are some nice tips on troubleshooting python extensions <a href=\"https://dynatrace.stackenterprise.co/articles/4734\">here</a></p>\n<p>If you don't have the root certificate present in the Activegate, you will get error messages like this in the EEC extensions logs:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-number\">2024</span>-<span class=\"hljs-number\">01</span>-<span class=\"hljs-number\">03</span> <span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">44</span>:<span class=\"hljs-number\">59.860</span> UTC [<span class=\"hljs-number\">0000d5</span>fc] info    [native] Rejected fastcheck <span class=\"hljs-keyword\">for</span> task f_2575433908796020679 - Extension <span class=\"hljs-keyword\">not</span> found in cache. Reason: Extension custom:rabbitmq-extension(<span class=\"hljs-number\">0.0</span>.<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">not</span> available in cache yet (queued <span class=\"hljs-keyword\">for</span> download). <span class=\"hljs-keyword\">Next</span> retry in &lt;<span class=\"hljs-number\">1</span> minutes\n<span class=\"hljs-number\">2024</span>-<span class=\"hljs-number\">01</span>-<span class=\"hljs-number\">03</span> <span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">45</span>:<span class=\"hljs-number\">03.150</span> UTC [<span class=\"hljs-number\">0000</span>b2d4] info    [native] Downloaded custom:rabbitmq-extension <span class=\"hljs-number\">0.0</span>.<span class=\"hljs-number\">2</span> <span class=\"hljs-number\">550</span>fd37f01d887404f85af391419d62846f5c639988181e1bac5acb3795d4ee9\n<span class=\"hljs-number\">2024</span>-<span class=\"hljs-number\">01</span>-<span class=\"hljs-number\">03</span> <span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">45</span>:<span class=\"hljs-number\">03.150</span> UTC [<span class=\"hljs-number\">0000</span>b2d4] warning [native] SignatureVerifier: Unable <span class=\"hljs-keyword\">to</span> verify C:\\ProgramData\\dynatrace\\<span class=\"hljs-comment\">remotepluginmodule\\/agent/runtime\\extensions\\download\\custom_rabbitmq-extension</span>\n<span class=\"hljs-number\">2024</span>-<span class=\"hljs-number\">01</span>-<span class=\"hljs-number\">03</span> <span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">45</span>:<span class=\"hljs-number\">03.150</span> UTC [<span class=\"hljs-number\">0000</span>b2d4] info    [native] SignatureVerified: avaiable certificate <span class=\"hljs-keyword\">files</span>: cacert.pem, ca.pem\n<span class=\"hljs-number\">2024</span>-<span class=\"hljs-number\">01</span>-<span class=\"hljs-number\">03</span> <span class=\"hljs-number\">01</span>:<span class=\"hljs-number\">45</span>:<span class=\"hljs-number\">03.150</span> UTC [<span class=\"hljs-number\">0000</span>b2d4] warning [native] SignatureVerifier: openssl <span class=\"hljs-keyword\">error</span>: <span class=\"hljs-keyword\">error</span>:<span class=\"hljs-number\">2E099064</span>:CMS routines:cms_signerinfo_verify_cert:certificate verify <span class=\"hljs-keyword\">error</span> : Verify <span class=\"hljs-keyword\">error</span>:unable <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">get</span> local issuer certificate\n</code></pre>\n<p>You can also see these logs directly in Dynatrace:</p>\n<p><img src=\"assets/code-migrate-08.png\" alt=\"code-migrate-08\" /></p>\n<p>If everything is working, you should see metrics in Dynatrace after a couple of minutes: </p>\n<p><img src=\"assets/code-migrate-09.png\" alt=\"code-migrate-09\" />  </p>\n<p>These are a bit dull, just metrics without entities and screens, we will fix that next.  </p>","activityList":[]},{"id":"3.4","name":"Topology","content":"<h2 id=\"topology\">Topology</h2>\n<p>This course does not intend to go in depth about topology in Dynatrace.<br />\nThere is documentation about topology <a href=\"https://docs.dynatrace.com/docs/shortlink/topology-model\">here</a>  </p>\n<p>The important bits to know for this exercise are:</p>\n<ol>\n<li>There are no more pure Custom Devices, every entity can have it's own type.  </li>\n<li>Entities are not created in the code, they are always derived from metrics (or logs, events and spans)</li>\n<li>There can be relationships between entities, example: a queue runs on a virtual host.  </li>\n</ol>\n<h3 id=\"definingtopology\">Defining topology</h3>\n<p>We have two entity types we can create for our extension:</p>\n<ul>\n<li><strong>Virtual Host</strong>, queues always belong to a virtual host. </li>\n<li><strong>Queue</strong>  </li>\n</ul>\n<blockquote>\n  <p>Always think about how the topology can be shaped from metrics when creating an extension.  </p>\n</blockquote>\n<p>Topology definition is <strong>not</strong> tied to python extensions, any extension can define topology and it is unrelated to metric collection.<br />\nRemember that you can always download any extensions from the <a href=\"https://www.dynatrace.com/hub/\">Dynatrace Hub</a> and look at how they define topology.  </p>\n<h3 id=\"topologyvirtualhost\">Topology - Virtual Host</h3>\n<p>Let's start by adding the virtual host type, add the <code>topology</code> element to <strong>extension.yaml</strong></p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">topology:</span>\n  <span class=\"hljs-attr\">types:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">rabbitmq:vhost</span>\n      <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Virtual</span> <span class=\"hljs-string\">Host</span>\n      <span class=\"hljs-attr\">rules:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">idPattern:</span> <span class=\"hljs-string\">&#x27;rabbitmq:vhost_{virtual_host}&#x27;</span>\n          <span class=\"hljs-attr\">instanceNamePattern:</span> <span class=\"hljs-string\">&#x27;{virtual_host}&#x27;</span>\n          <span class=\"hljs-attr\">iconPattern:</span> <span class=\"hljs-string\">server</span>\n          <span class=\"hljs-attr\">sources:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sourceType:</span> <span class=\"hljs-string\">Metrics</span>\n              <span class=\"hljs-attr\">condition:</span> <span class=\"hljs-string\">$prefix(messages_)</span>\n          <span class=\"hljs-attr\">requiredDimensions:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">virtual_host</span>         \n</code></pre>\n<p>This is telling Dynatrace:</p>\n<ol>\n<li>Create a new entity type with ID <code>rabbitmq:vhost</code> and name <code>Virtual Host</code></li>\n<li>Create entities out of this type when the metric prefix is <code>messages_</code>, and there is a dimension <code>virtual_host</code></li>\n<li>Call these entities <code>rabbitmq:vhost_{virtual_host}</code> and display them as <code>{virtual_host}</code></li>\n</ol>\n<p>Building and upload the extension should add this definition to Dynatrace.<br />\nNote that this is something that could also have been defined in the Dynatrace UI:  </p>\n<p><img src=\"assets/topology-01.png\" alt=\"topology-01\" />  </p>\n<p>When you navigate to <code>/ui/entity/list/rabbitmq:vhost</code>, you get a list of all virtual hosts that have been created.<br />\nNote, this screen can be fully customized with Unified Analysis Screens.  </p>\n<p><img src=\"assets/topology-02.png\" alt=\"topology-02\" />  </p>\n<p>The details screen of an entity can also be customized, by default all metrics are shown.  </p>\n<p><img src=\"assets/topology-03.png\" alt=\"topology-03\" /></p>\n<h3 id=\"topologyqueue\">Topology - Queue</h3>\n<p>Let's add the queue type by adding an extra item to the types list:  </p>\n<pre><code class=\"hljs\">    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">rabbitmq:queue</span>\n      <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Queue</span>\n      <span class=\"hljs-attr\">rules:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">idPattern:</span> <span class=\"hljs-string\">&#x27;rabbitmq:queue_{virtual_host}_{queue}&#x27;</span>\n          <span class=\"hljs-attr\">instanceNamePattern:</span> <span class=\"hljs-string\">&#x27;{queue}&#x27;</span>\n          <span class=\"hljs-attr\">iconPattern:</span> <span class=\"hljs-string\">queue</span>\n          <span class=\"hljs-attr\">sources:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sourceType:</span> <span class=\"hljs-string\">Metrics</span>\n              <span class=\"hljs-attr\">condition:</span> <span class=\"hljs-string\">$prefix(messages_)</span>\n          <span class=\"hljs-attr\">requiredDimensions:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">queue</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">virtual_host</span>\n</code></pre>\n<h3 id=\"topologyrelationships\">Topology - Relationships</h3>\n<p>The queue needs to have a relationship to the virtual host.<br />\nWe can say that a Queue runs on a Virtual Host.  </p>\n<p>Add the <code>relationships</code> property to the <code>topology</code> section:  </p>\n<pre><code class=\"hljs yaml language-yaml\">  <span class=\"hljs-attr\">relationships:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sourceType:</span> <span class=\"hljs-string\">Metrics</span>\n          <span class=\"hljs-attr\">condition:</span> <span class=\"hljs-string\">$prefix(messages_)</span>\n      <span class=\"hljs-attr\">fromType:</span> <span class=\"hljs-string\">rabbitmq:queue</span>\n      <span class=\"hljs-attr\">typeOfRelation:</span> <span class=\"hljs-string\">RUNS_ON</span>\n      <span class=\"hljs-attr\">toType:</span> <span class=\"hljs-string\">rabbitmq:vhost</span>\n</code></pre>\n<p>The entire topology section should now look like this:</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">topology:</span>\n  <span class=\"hljs-attr\">types:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">rabbitmq:vhost</span>\n      <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Virtual</span> <span class=\"hljs-string\">Host</span>\n      <span class=\"hljs-attr\">rules:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">idPattern:</span> <span class=\"hljs-string\">&#x27;rabbitmq:vhost_{virtual_host}&#x27;</span>\n          <span class=\"hljs-attr\">instanceNamePattern:</span> <span class=\"hljs-string\">&#x27;{virtual_host}&#x27;</span>\n          <span class=\"hljs-attr\">iconPattern:</span> <span class=\"hljs-string\">server</span>\n          <span class=\"hljs-attr\">sources:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sourceType:</span> <span class=\"hljs-string\">Metrics</span>\n              <span class=\"hljs-attr\">condition:</span> <span class=\"hljs-string\">$prefix(messages_)</span>\n          <span class=\"hljs-attr\">requiredDimensions:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">virtual_host</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">rabbitmq:queue</span>\n      <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Queue</span>\n      <span class=\"hljs-attr\">rules:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">idPattern:</span> <span class=\"hljs-string\">&#x27;rabbitmq:queue_{virtual_host}_{queue}&#x27;</span>\n          <span class=\"hljs-attr\">instanceNamePattern:</span> <span class=\"hljs-string\">&#x27;{queue}&#x27;</span>\n          <span class=\"hljs-attr\">iconPattern:</span> <span class=\"hljs-string\">queue</span>\n          <span class=\"hljs-attr\">sources:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sourceType:</span> <span class=\"hljs-string\">Metrics</span>\n              <span class=\"hljs-attr\">condition:</span> <span class=\"hljs-string\">$prefix(messages_)</span>\n          <span class=\"hljs-attr\">requiredDimensions:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">queue</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">virtual_host</span>\n\n  <span class=\"hljs-attr\">relationships:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sourceType:</span> <span class=\"hljs-string\">Metrics</span>\n          <span class=\"hljs-attr\">condition:</span> <span class=\"hljs-string\">$prefix(messages_)</span>\n      <span class=\"hljs-attr\">fromType:</span> <span class=\"hljs-string\">rabbitmq:queue</span>\n      <span class=\"hljs-attr\">typeOfRelation:</span> <span class=\"hljs-string\">RUNS_ON</span>\n      <span class=\"hljs-attr\">toType:</span> <span class=\"hljs-string\">rabbitmq:vhost</span>\n</code></pre>\n<p>After uploading, new metrics should cause entities to be created.</p>\n<p><img src=\"assets/topology-04.png\" alt=\"topology-04\" /></p>\n<p>You can also use the monitored entities API to check that the relationship exists:</p>\n<p>Making a request to <strong>https://lwp00649.dev.dynatracelabs.com/api/v2/entityTypes/rabbitmq:queue</strong> gives:</p>\n<pre><code class=\"hljs json language-json\">{\n  <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;rabbitmq:queue&quot;</span>,\n  <span class=\"hljs-attr\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;Queue&quot;</span>,\n  <span class=\"hljs-attr\">&quot;dimensionKey&quot;</span>: <span class=\"hljs-string\">&quot;dt.entity.rabbitmq:queue&quot;</span>,\n  <span class=\"hljs-attr\">&quot;entityLimitExceeded&quot;</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">&quot;properties&quot;</span>: [],\n  <span class=\"hljs-attr\">&quot;tags&quot;</span>: <span class=\"hljs-string\">&quot;List&quot;</span>,\n  <span class=\"hljs-attr\">&quot;managementZones&quot;</span>: <span class=\"hljs-string\">&quot;List&quot;</span>,\n  <span class=\"hljs-attr\">&quot;fromRelationships&quot;</span>: [\n    {\n      <span class=\"hljs-attr\">&quot;id&quot;</span>: <span class=\"hljs-string\">&quot;runsOn&quot;</span>,\n      <span class=\"hljs-attr\">&quot;toTypes&quot;</span>: [\n        <span class=\"hljs-string\">&quot;rabbitmq:vhost&quot;</span>\n      ]\n    }\n  ],\n  <span class=\"hljs-attr\">&quot;toRelationships&quot;</span>: []\n}\n</code></pre>\n<p>In the next lesson we will customize the details screen of the virtual host so that we can show the queues that run on it. </p>","activityList":[]},{"id":"3.5","name":"Screens","content":"<h2 id=\"screens\">Screens</h2>\n<p>Dynatrace has a powerful feature called Unified Analysis Screens.<br />\nIt allows one to declarative define a screen that shows metrics, topology, events, logs.<br />\nThis is the same technology used for the product itself, and extension authors can use it to create custom screens.<br />\nYou can find documentation <a href=\"https://docs.dynatrace.com/docs/shortlink/ua-pages\">here</a></p>\n<p>We won't get indepth on screens, but here are some important points:</p>\n<ol>\n<li>For every entity type, you can optionally define the <em>List</em> and <em>Details</em> screens</li>\n<li>You can have charts, logs, relationships, properties and more on the screens</li>\n<li>Always try to define screens, it makes your extension easier to use and more powerful</li>\n</ol>\n<h3 id=\"virtualhostscreen\">Virtual Host Screen</h3>\n<p>Let's customize the Virtual Host Screen, to show some key metrics and add a list of queues running on the virtual host.  </p>\n<p>Add the <strong>screens</strong> element to <strong>extension.yaml</strong>:</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">screens:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">entityType:</span> <span class=\"hljs-string\">rabbitmq:vhost</span>\n\n    <span class=\"hljs-comment\"># This is housekeeping, mandatory fields</span>\n    <span class=\"hljs-attr\">detailsSettings:</span> \n      <span class=\"hljs-attr\">staticContent:</span>\n        <span class=\"hljs-attr\">showProblems:</span> <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-attr\">showProperties:</span> <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-attr\">showTags:</span> <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-attr\">showGlobalFilter:</span> <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-attr\">showAddTag:</span> <span class=\"hljs-literal\">true</span>\n\n        <span class=\"hljs-attr\">breadcrumbs:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">NOOP</span>\n            <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">RabbitMQ</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">ENTITY_LIST_REF</span>\n            <span class=\"hljs-attr\">entityType:</span> <span class=\"hljs-string\">rabbitmq:vhost</span>\n            <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Virtual</span> <span class=\"hljs-string\">Hosts</span>\n\n      <span class=\"hljs-comment\"># Manually define the layout of the details page</span>\n      <span class=\"hljs-attr\">layout:</span>\n        <span class=\"hljs-attr\">autoGenerate:</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-attr\">cards:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">vhost-metrics</span>\n            <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">CHART_GROUP</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">vhost-queues</span>\n            <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">ENTITIES_LIST</span>\n\n    <span class=\"hljs-attr\">chartsCards:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">vhost-metrics</span>\n        <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">NORMAL</span>\n        <span class=\"hljs-attr\">numberOfVisibleCharts:</span> <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Virtual</span> <span class=\"hljs-string\">Host</span> <span class=\"hljs-string\">Overview</span>\n        <span class=\"hljs-attr\">charts:</span>\n          <span class=\"hljs-comment\"># Define a chart with two metrics</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Messages</span> <span class=\"hljs-string\">Published</span> <span class=\"hljs-string\">and</span> <span class=\"hljs-string\">Delivered</span>\n            <span class=\"hljs-attr\">visualizationType:</span> <span class=\"hljs-string\">GRAPH_CHART</span>\n            <span class=\"hljs-attr\">graphChartConfig:</span>\n              <span class=\"hljs-attr\">stacked:</span> <span class=\"hljs-literal\">true</span>\n              <span class=\"hljs-attr\">metrics:</span>\n                <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">metricSelector:</span> <span class=\"hljs-string\">messages_deliver_get</span>\n                  <span class=\"hljs-attr\">visualization:</span>\n                    <span class=\"hljs-attr\">seriesType:</span> <span class=\"hljs-string\">COLUMN</span>\n                    <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Delivered</span>\n                <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">metricSelector:</span> <span class=\"hljs-string\">messages_publish</span>\n                  <span class=\"hljs-attr\">visualization:</span>\n                    <span class=\"hljs-attr\">seriesType:</span> <span class=\"hljs-string\">COLUMN</span>\n                    <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Published</span>\n\n\n          <span class=\"hljs-comment\"># Define a chart with 2 metrics</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Messages</span> <span class=\"hljs-string\">Ready</span> <span class=\"hljs-string\">and</span> <span class=\"hljs-string\">Unacknowledged</span>\n            <span class=\"hljs-attr\">visualizationType:</span> <span class=\"hljs-string\">GRAPH_CHART</span>\n            <span class=\"hljs-attr\">graphChartConfig:</span>\n              <span class=\"hljs-attr\">stacked:</span> <span class=\"hljs-literal\">true</span>\n              <span class=\"hljs-attr\">metrics:</span>\n                <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">metricSelector:</span> <span class=\"hljs-string\">messages_ready</span>\n                  <span class=\"hljs-attr\">visualization:</span>\n                    <span class=\"hljs-attr\">seriesType:</span> <span class=\"hljs-string\">COLUMN</span>\n                    <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Ready</span>\n                <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">metricSelector:</span> <span class=\"hljs-string\">messages_unacknowledged</span>\n                  <span class=\"hljs-attr\">visualization:</span>\n                    <span class=\"hljs-attr\">seriesType:</span> <span class=\"hljs-string\">COLUMN</span>\n                    <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Unacknowledged</span>\n\n    <span class=\"hljs-comment\"># List of entities</span>\n    <span class=\"hljs-attr\">entitiesListCards:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">vhost-queues</span>\n        <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Queues</span>\n        <span class=\"hljs-attr\">pageSize:</span> <span class=\"hljs-number\">5</span>\n        <span class=\"hljs-attr\">entitiesLimit:</span> <span class=\"hljs-number\">500</span>\n        <span class=\"hljs-attr\">displayCharts:</span> <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-attr\">enableDetailsExpandability:</span> <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-attr\">numberOfVisibleCharts:</span> <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-attr\">displayIcons:</span> <span class=\"hljs-literal\">true</span>\n\n        <span class=\"hljs-comment\"># How do we find the entities?</span>\n        <span class=\"hljs-attr\">entitySelectorTemplate:</span> <span class=\"hljs-string\">type(rabbitmq:queue),fromRelationships.runsOn($(entityConditions))</span>\n\n        <span class=\"hljs-comment\"># We can add charts to the list of entities</span>\n        <span class=\"hljs-attr\">charts:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Messages</span> <span class=\"hljs-string\">Ready</span>\n            <span class=\"hljs-attr\">visualizationType:</span> <span class=\"hljs-string\">GRAPH_CHART</span>\n            <span class=\"hljs-attr\">graphChartConfig:</span>\n              <span class=\"hljs-attr\">metrics:</span>\n                <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">metricSelector:</span> <span class=\"hljs-string\">messages_ready:splitBy()</span>\n                  <span class=\"hljs-attr\">visualization:</span>\n                    <span class=\"hljs-attr\">themeColor:</span> <span class=\"hljs-string\">TURQUOISE</span>\n                    <span class=\"hljs-attr\">seriesType:</span> <span class=\"hljs-string\">COLUMN</span>\n                    <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Ready</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Messags</span> <span class=\"hljs-string\">Publish</span>\n            <span class=\"hljs-attr\">visualizationType:</span> <span class=\"hljs-string\">GRAPH_CHART</span>\n            <span class=\"hljs-attr\">graphChartConfig:</span>\n              <span class=\"hljs-attr\">metrics:</span>\n                <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">metricSelector:</span> <span class=\"hljs-string\">messages_publish:splitBy()</span>\n                  <span class=\"hljs-attr\">visualization:</span>\n                    <span class=\"hljs-attr\">themeColor:</span> <span class=\"hljs-string\">ORANGE</span>\n                    <span class=\"hljs-attr\">seriesType:</span> <span class=\"hljs-string\">AREA</span>\n                    <span class=\"hljs-attr\">displayName:</span> <span class=\"hljs-string\">Published</span>\n</code></pre>\n<p>This definition produces the following screen:  </p>\n<p><img src=\"assets/screens-01.png\" alt=\"screens-01\" />   </p>\n<p>Generating screens is made much easier if oyu use the VSCode extension autocomplete features.<br />\nIt takes some time to get used to the syntax, but the effort is worth it.  </p>","activityList":[]}]},{"id":"4","name":"Resources","content":"<h2 id=\"resources\">Resources</h2>\n<h3 id=\"links\">Links</h3>\n<ul>\n<li><a href=\"https://dynatrace-extensions.github.io/dt-extensions-python-sdk/\">Python SDK Documentation</a></li>\n<li><a href=\"https://dynatrace.stackenterprise.co/articles/4734\">Troubleshooting Python Extensions</a></li>\n<li><a href=\"https://dynatrace.enterprise.slack.com/archives/C01QUQ8770E\">Extensions team on slack</a></li>\n<li><a href=\"https://developer.dynatracelabs.com/extensions-v2/dynatrace-extensions-vscode/\">VSCode Extension</a></li>\n<li><a href=\"https://dynatrace-extensions.github.io/python-ef1-ef2-training/\">This training</a></li>\n</ul>\n<h3 id=\"pythonextensions\">Python Extensions</h3>\n<p>Some python extensions on the Hub, you can download and look at the code:</p>\n<ul>\n<li><a href=\"https://www.dynatrace.com/hub/detail/anypoint-mq/\">Anypoint MQ</a></li>\n<li><a href=\"https://www.dynatrace.com/hub/detail/mulesoft-cloudhub-extension-v2\">Mulesoft Cloudhub</a></li>\n<li><a href=\"https://www.dynatrace.com/hub/detail/citrix-virtual-apps-and-desktops-v2/\">Citrix Desktops</a></li>\n<li><a href=\"https://www.dynatrace.com/hub/detail/tibco-ems-1\">Tibco EMS</a></li>\n<li><a href=\"https://www.dynatrace.com/hub/detail/salesforce-event-streaming-v2\">Salesforce Event Streaming</a></li>\n<li><a href=\"https://www.dynatrace.com/hub/detail/filesystem-monitoring-extension-v2\">Filesystem Monitoring</a></li>\n<li><a href=\"https://www.dynatrace.com/hub/detail/elasticsearch-1\">Elasticsearch</a></li>\n</ul>","activityList":[]},{"id":"5","name":"Extras","content":"<h2 id=\"extras\">Extras</h2>\n<p>On this bonus chapter, we will explore some of the exclusive features of the Python EF2 SDK.<br />\nThese were not present in EF1, so it doesn't necessarily apply to a migration, but can make an extension nicer to use and code.  </p>","activityList":[{"id":"5.1","name":"Scheduling methods and self monitoring","content":"<h2 id=\"schedulingmethodsandselfmonitoring\">Scheduling methods and self monitoring</h2>\n<h3 id=\"scheduling\">Scheduling</h3>\n<p>As we've explored before, the <em>query</em> method still exists in EF2, but there is nothing special about this method.<br />\nFrom the SDK point of view, it is just a method that happens to be scheduled to run every 60 seconds.  </p>\n<p>You can also schedule your own methods to run at whatever frequency you prefer.  </p>\n<p>So we could modify the code, and instead of counting the number of executions, we can schedule a method with a specific time interval.</p>\n<p>This is how the code can look like when using the <strong>schedule</strong> method:</p>\n<pre><code class=\"hljs python language-python\"><span class=\"hljs-keyword\">import</span> re\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> Dict\n<span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> timedelta\n\n<span class=\"hljs-keyword\">from</span> dynatrace_extension <span class=\"hljs-keyword\">import</span> Extension\n<span class=\"hljs-keyword\">from</span> dynatrace_extension.sdk.extension <span class=\"hljs-keyword\">import</span> DtEventType\n\n<span class=\"hljs-keyword\">from</span> .rabbitmq_api <span class=\"hljs-keyword\">import</span> RabbitMQClient\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RabbitMQExtension</span>(<span class=\"hljs-params\">Extension</span>):</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span>(<span class=\"hljs-params\">self, **kwargs</span>):</span>\n\n        endpoints = self.activation_config.get(<span class=\"hljs-string\">&quot;endpoints&quot;</span>)\n        <span class=\"hljs-keyword\">for</span> endpoint <span class=\"hljs-keyword\">in</span> endpoints:\n            frequency = endpoint.get(<span class=\"hljs-string\">&quot;frequency&quot;</span>, <span class=\"hljs-number\">1</span>)\n\n            <span class=\"hljs-comment\"># Schedule the monitor method to be run every &lt;frequency&gt; minutes</span>\n            <span class=\"hljs-comment\"># We also pass the endpoint as a parameter to this method</span>\n            self.schedule(self.monitor, timedelta(minutes=frequency), (endpoint,))\n\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">monitor</span>(<span class=\"hljs-params\">self, endpoint: Dict</span>):</span>\n         <span class=\"hljs-comment\"># Step 1 - Get configuration parameters from the UI</span>\n        node_address = endpoint.get(<span class=\"hljs-string\">&quot;rabbitmq_node&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>)\n        username = endpoint.get(<span class=\"hljs-string\">&quot;rabbitmq_username&quot;</span>, <span class=\"hljs-string\">&quot;guest&quot;</span>)\n        password = endpoint.get(<span class=\"hljs-string\">&quot;rabbitmq_password&quot;</span>, <span class=\"hljs-string\">&quot;guest&quot;</span>)\n        queues_include = endpoint.get(<span class=\"hljs-string\">&quot;queues_include&quot;</span>, <span class=\"hljs-string\">&quot;.*&quot;</span>).split(<span class=\"hljs-string\">&quot;/n&quot;</span>)\n\n        <span class=\"hljs-comment\"># This is a check, we are trying to connect to RabbitMQ</span>\n        rabbit = RabbitMQClient(node_address, username, password, logger=self.logger)\n        <span class=\"hljs-keyword\">try</span>:\n            _ = rabbit.cluster\n            self.logger.info(<span class=\"hljs-string\">f&quot;Successfully connected to <span class=\"hljs-subst\">{node_address}</span>&quot;</span>)\n        <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n            error_message = <span class=\"hljs-string\">f&quot;Could not connect to RabbitMQ node <span class=\"hljs-subst\">{node_address}</span>&quot;</span>\n            self.report_dt_event(DtEventType.ERROR_EVENT, error_message)\n            self.logger.error(error_message)\n            <span class=\"hljs-keyword\">raise</span> Exception(error_message) <span class=\"hljs-keyword\">from</span> e\n\n        <span class=\"hljs-comment\"># Report the queue metrics</span>\n        <span class=\"hljs-keyword\">for</span> queue <span class=\"hljs-keyword\">in</span> rabbit.queues:\n            self.logger.info(<span class=\"hljs-string\">f&quot;Checking queue &#x27;<span class=\"hljs-subst\">{queue.name}</span>&#x27;&quot;</span>)\n            monitor = <span class=\"hljs-literal\">False</span>\n\n            <span class=\"hljs-keyword\">for</span> pattern <span class=\"hljs-keyword\">in</span> queues_include:\n                <span class=\"hljs-keyword\">if</span> pattern <span class=\"hljs-keyword\">and</span> re.match(pattern, queue.name):\n                    self.logger.info(<span class=\"hljs-string\">f&quot;Adding queue &#x27;<span class=\"hljs-subst\">{queue.name}</span>&#x27; because it matched the pattern &#x27;<span class=\"hljs-subst\">{pattern}</span>&#x27;&quot;</span>)\n                    monitor = <span class=\"hljs-literal\">True</span>\n\n            <span class=\"hljs-keyword\">if</span> monitor:\n                self.report_metric(<span class=\"hljs-string\">&quot;messages_ready&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: queue.name})\n                self.report_metric(<span class=\"hljs-string\">&quot;messages_unacknowledged&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: queue.name})\n                self.report_metric(<span class=\"hljs-string\">&quot;messages_ack&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: queue.name})\n                self.report_metric(<span class=\"hljs-string\">&quot;messages_deliver_get&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: queue.name})\n                self.report_metric(<span class=\"hljs-string\">&quot;messages_publish&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: queue.name})\n                self.report_metric(<span class=\"hljs-string\">&quot;messages_redeliver&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: queue.name})\n                self.report_metric(<span class=\"hljs-string\">&quot;messages_return&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: queue.name})\n\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span>\n    RabbitMQExtension().run()\n\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:\n    main()\n</code></pre>\n<p>The main differences are:</p>\n<ol>\n<li>We remove the query method, we don't need anything to be scheduled every 60 seconds</li>\n<li>We add a new method called <code>monitor</code>, which takes an <code>endpoint</code> as a parameter, this method can have any name.</li>\n<li>We schedule this method to run every <code>frequency</code> minutes, and we pass the endpoint as a parameter to this method</li>\n</ol>\n<p>Note that you can schedule methods with any custom frequency, you are no longer tied to running things every minute.</p>\n<h3 id=\"selfmonitoring\">Self monitoring</h3>\n<p>Python extensions report some self monitoring metrics that might be useful when troubleshooting an extension</p>\n<p><img src=\"assets/extra-01.png\" alt=\"extra-01\" /></p>\n<p>They are:</p>\n<ul>\n<li><strong>sfm:datasource.python.execution.count</strong> - The number of calls for each scheduled method. </li>\n<li><strong>dsfm:datasource.python.execution.exception.count</strong> - The number of raised exceptions for each scheduled method. </li>\n<li><strong>dsfm:datasource.python.execution.ok.count</strong> - The number of successful executions for each scheduled method. </li>\n<li><strong>dsfm:datasource.python.execution.time</strong> - How long each scheduled method took to run. </li>\n<li><strong>dsfm:datasource.python.execution.timeout.count</strong> - How many times a scheduled method took longer than it's interval to run. </li>\n<li><strong>dsfm:datasource.python.execution.total.count</strong>  - The total number of executions of a callback since the extension started.</li>\n<li><strong>dsfm:datasource.python.threads</strong> - How many threads are currently running in the extension.</li>\n</ul>\n<p>The number of threads is useful to know if you are running into performance issues:</p>\n<p><img src=\"assets/extra-02.png\" alt=\"extra-02\" /></p>\n<p>It is also easy to spot methods that take too long to run:</p>\n<p><img src=\"assets/extra-03.png\" alt=\"extra-03\" /></p>\n<p>There is also a <a href=\"https://www.dynatrace.com/hub/detail/extensions-health\">self monitoring extension</a> that comes with a handy dashboard and metrics:</p>\n<p><img src=\"assets/extra-04.png\" alt=\"extra-04\" /></p>","activityList":[]},{"id":"5.2","name":"Fastchecks","content":"<h2 id=\"fastchecks\">Fastchecks</h2>\n<p>When running from an Activegate, there is one extra step that is done before an extension is assigned.  </p>\n<p>The EEC runs a fastcheck to determine if the extension can run on the Activegate.  </p>\n<p>As a developer, you can optionally define a method called <code>fastcheck</code> that will be called before the extension is assigned to an Activegate.<br />\nIn this method you can test for instance if this AG can collect to the RabbitMQ, and raise an exception if it cannot.  </p>\n<p>We can change our extension to make use of the fastcheck:</p>\n<pre><code class=\"hljs python language-python\"><span class=\"hljs-keyword\">import</span> re\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> Dict\n<span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> timedelta\n\n<span class=\"hljs-keyword\">from</span> dynatrace_extension <span class=\"hljs-keyword\">import</span> Extension\n<span class=\"hljs-keyword\">from</span> dynatrace_extension.sdk.communication <span class=\"hljs-keyword\">import</span> Status, StatusValue\n\n<span class=\"hljs-keyword\">from</span> .rabbitmq_api <span class=\"hljs-keyword\">import</span> RabbitMQClient\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RabbitMQExtension</span>(<span class=\"hljs-params\">Extension</span>):</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span>(<span class=\"hljs-params\">self, **kwargs</span>):</span>\n\n        endpoints = self.activation_config.get(<span class=\"hljs-string\">&quot;endpoints&quot;</span>)\n        <span class=\"hljs-keyword\">for</span> endpoint <span class=\"hljs-keyword\">in</span> endpoints:\n            frequency = endpoint.get(<span class=\"hljs-string\">&quot;frequency&quot;</span>, <span class=\"hljs-number\">1</span>)\n\n            <span class=\"hljs-comment\"># Schedule the monitor method to be run every &lt;frequency&gt; minutes</span>\n            <span class=\"hljs-comment\"># We also pass the endpoint as a parameter to this method</span>\n            self.schedule(self.monitor, timedelta(minutes=frequency), (endpoint,))\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">create_rabbitmq_client</span>(<span class=\"hljs-params\">self, endpoint: Dict</span>) -&gt; RabbitMQClient:</span>\n        node_address = endpoint.get(<span class=\"hljs-string\">&quot;rabbitmq_node&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>)\n        username = endpoint.get(<span class=\"hljs-string\">&quot;rabbitmq_username&quot;</span>, <span class=\"hljs-string\">&quot;guest&quot;</span>)\n        password = endpoint.get(<span class=\"hljs-string\">&quot;rabbitmq_password&quot;</span>, <span class=\"hljs-string\">&quot;guest&quot;</span>)\n        <span class=\"hljs-keyword\">return</span> RabbitMQClient(node_address, username, password, logger=self.logger)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fastcheck</span>(<span class=\"hljs-params\">self</span>) -&gt; Status:</span>\n        <span class=\"hljs-keyword\">for</span> endpoint <span class=\"hljs-keyword\">in</span> self.activation_config.get(<span class=\"hljs-string\">&quot;endpoints&quot;</span>):\n            rabbit = self.create_rabbitmq_client(endpoint)\n            <span class=\"hljs-keyword\">try</span>:\n                _ = rabbit.cluster\n                self.logger.info(<span class=\"hljs-string\">f&quot;Successfully connected to <span class=\"hljs-subst\">{rabbit.base_url}</span>&quot;</span>)\n            <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n                error_message = <span class=\"hljs-string\">f&quot;Could not connect to RabbitMQ node <span class=\"hljs-subst\">{rabbit.base_url}</span>&quot;</span>\n                self.logger.error(error_message)\n                <span class=\"hljs-keyword\">raise</span> Exception(error_message) <span class=\"hljs-keyword\">from</span> e\n\n                <span class=\"hljs-comment\"># Optionally, we could return something like:</span>\n                <span class=\"hljs-comment\"># return Status(StatusValue.ERROR, error_message)</span>\n\n        <span class=\"hljs-keyword\">return</span> Status(StatusValue.OK, <span class=\"hljs-string\">&quot;This AG can monitor RabbitMQ&quot;</span>)\n\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">monitor</span>(<span class=\"hljs-params\">self, endpoint: Dict</span>):</span>\n        queues_include = endpoint.get(<span class=\"hljs-string\">&quot;queues_include&quot;</span>, <span class=\"hljs-string\">&quot;.*&quot;</span>).split(<span class=\"hljs-string\">&quot;/n&quot;</span>)\n        rabbit = self.create_rabbitmq_client(endpoint)\n\n        <span class=\"hljs-comment\"># Report the queue metrics</span>\n        <span class=\"hljs-keyword\">for</span> queue <span class=\"hljs-keyword\">in</span> rabbit.queues:\n            self.logger.info(<span class=\"hljs-string\">f&quot;Checking queue &#x27;<span class=\"hljs-subst\">{queue.name}</span>&#x27;&quot;</span>)\n            monitor = <span class=\"hljs-literal\">False</span>\n\n            <span class=\"hljs-keyword\">for</span> pattern <span class=\"hljs-keyword\">in</span> queues_include:\n                <span class=\"hljs-keyword\">if</span> pattern <span class=\"hljs-keyword\">and</span> re.match(pattern, queue.name):\n                    self.logger.info(<span class=\"hljs-string\">f&quot;Adding queue &#x27;<span class=\"hljs-subst\">{queue.name}</span>&#x27; because it matched the pattern &#x27;<span class=\"hljs-subst\">{pattern}</span>&#x27;&quot;</span>)\n                    monitor = <span class=\"hljs-literal\">True</span>\n\n            <span class=\"hljs-keyword\">if</span> monitor:\n                self.report_metric(<span class=\"hljs-string\">&quot;messages_ready&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: queue.name})\n                self.report_metric(<span class=\"hljs-string\">&quot;messages_unacknowledged&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: queue.name})\n                self.report_metric(<span class=\"hljs-string\">&quot;messages_ack&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: queue.name})\n                self.report_metric(<span class=\"hljs-string\">&quot;messages_deliver_get&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: queue.name})\n                self.report_metric(<span class=\"hljs-string\">&quot;messages_publish&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: queue.name})\n                self.report_metric(<span class=\"hljs-string\">&quot;messages_redeliver&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: queue.name})\n                self.report_metric(<span class=\"hljs-string\">&quot;messages_return&quot;</span>,  queue.messages_ready, dimensions={<span class=\"hljs-string\">&quot;virtual_host&quot;</span>: queue.vhost, <span class=\"hljs-string\">&quot;queue&quot;</span>: queue.name})\n\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span>\n    RabbitMQExtension().run()\n\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:\n    main()\n</code></pre>\n<p>We can run the fastcheck with <code>dt-sdk run --fastcheck</code></p>\n<pre><code class=\"hljs\">❯ dt-sdk run <span class=\"hljs-comment\">--fastcheck</span>\nRunning: C:\\Program Files\\Python310\\python.exe -m rabbitmq_extension <span class=\"hljs-comment\">--activationconfig activation.json --fastcheck</span>\n<span class=\"hljs-number\">2024</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-06</span> <span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">49</span>:<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">351</span> [<span class=\"hljs-keyword\">INFO</span>] api (MainThread): <span class=\"hljs-comment\">-----------------------------------------------------</span>\n<span class=\"hljs-number\">2024</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-06</span> <span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">49</span>:<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">352</span> [<span class=\"hljs-keyword\">INFO</span>] api (MainThread): Starting &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-string\">&#x27;__main__.RabbitMQExtension&#x27;</span>&gt; , <span class=\"hljs-keyword\">version</span>: <span class=\"hljs-number\">1.1</span><span class=\"hljs-number\">.1</span>\n<span class=\"hljs-number\">2024</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-06</span> <span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">49</span>:<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">352</span> [<span class=\"hljs-keyword\">INFO</span>] api (MainThread): Running fastcheck <span class=\"hljs-keyword\">for</span> monitoring <span class=\"hljs-keyword\">configuration</span> <span class=\"hljs-string\">&#x27;&#x27;</span>\n<span class=\"hljs-number\">2024</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-06</span> <span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">49</span>:<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">552</span> [<span class=\"hljs-keyword\">INFO</span>] dynatrace_extension.sdk.<span class=\"hljs-keyword\">extension</span> (MainThread): Successfully connected <span class=\"hljs-keyword\">to</span> https://b-d9835915<span class=\"hljs-number\">-0721</span><span class=\"hljs-number\">-47</span>f1<span class=\"hljs-number\">-994</span>c-b43c7b6dd800.mq.us-east<span class=\"hljs-number\">-1.</span>amazonaws.com\n<span class=\"hljs-number\">2024</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-06</span> <span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">49</span>:<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">552</span> [<span class=\"hljs-keyword\">INFO</span>] api (MainThread): Sending fastcheck status: {&quot;status&quot;: &quot;OK&quot;, &quot;message&quot;: &quot;This AG can monitor RabbitMQ&quot;}\n<span class=\"hljs-number\">2024</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-06</span> <span class=\"hljs-number\">09</span>:<span class=\"hljs-number\">49</span>:<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">553</span> [<span class=\"hljs-keyword\">INFO</span>] api (MainThread): send_status: <span class=\"hljs-string\">&#x27;{&quot;status&quot;: &quot;OK&quot;, &quot;message&quot;: &quot;This AG can monitor RabbitMQ&quot;}&#x27;</span>\n</code></pre>\n<p>Fastchecks are an important part of AG extensions, and can give the user quick feedback when an AG cannot run an extension.<br />\nFastcheks are supposed to be quick, they will timeout completely after 60 seconds, try to have them take 15 seconds or less to complete.  </p>","activityList":[]}]}]