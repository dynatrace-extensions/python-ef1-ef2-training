[{"id":"1","name":"App development for Workflows\r","content":"<h2 id=\"appdevelopmentforworkflows\">App development for Workflows</h2>\n<p>In this course we will learn how to create a Dynatrace Workflow App.<br />\nThis is a type of Dynatrace App that can provide Actions to be executed in Workflows.</p>\n<p>At the end we will have created an Action that can send emails.</p>\n<h2 id=\"requirements\">Requirements</h2>\n<ul>\n<li>Access to a <code>dev</code> or <code>sprint</code> environment<ul>\n<li>This can be a shared environment with other people </li>\n<li>If you don't have access to an environment, see instructions <a href=\"https://dynatrace.sharepoint.com/sites/dynatrace.carpe/SitePages/Create-a-tenant.aspx\">here</a> </li></ul></li>\n<li><a href=\"https://nodejs.org/en/download\">Node.js 16.13.0</a> or later installed on your work laptop<ul>\n<li>You can run <code>node --version</code> to check your version</li></ul></li>\n<li>Basic knowledge of <a href=\"https://www.dynatrace.com/support/help/shortlink/workflows\">Dynatrace Workflows</a></li>\n<li>Basic NodeJS knowledge<ul>\n<li><a href=\"https://nodejs.org/en/docs/guides/getting-started-guide/\">NodeJS</a></li>\n<li><a href=\"https://docs.npmjs.com/getting-started\">NPM</a></li></ul></li>\n</ul>\n<p>Nice to have, not mandatory:</p>\n<ul>\n<li>Basic knowledge of <a href=\"https://www.typescriptlang.org/docs/\">Typescript</a></li>\n<li>Basic knowledge of <a href=\"https://reactjs.org/docs/getting-started.html\">React</a></li>\n</ul>\n<p>The technical requirements are met if you can follow the <a href=\"https://developer.dynatracelabs.com/getting-started/quickstart\">developer quickstart</a></p>\n<h3 id=\"advancedsections\">Advanced sections</h3>\n<p>Modules 4 and forward are considered \"advanced\" and require additional knowledge.</p>\n<ul>\n<li>Some <a href=\"https://dt-url.net/9103uzb\">Settings 2.0</a> experience<ul>\n<li>Defining schemas (not consuming schemas)</li></ul></li>\n</ul>","activityList":[]},{"id":"2","name":"Creating Workflow apps\r","content":"<h2 id=\"creatingworkflowapps\">Creating Workflow apps</h2>\n<p>A Dynatrace App can be created using <code>dt-app</code>.  </p>\n<p>We are not focusing on \"regular\" apps during this session, but there is abundant material on how to get started <a href=\"https://developer.dynatracelabs.com/getting-started/quickstart/\">here</a>.  </p>\n<p>Apps can be enhanced to also provide <a href=\"https://www.dynatrace.com/support/help/shortlink/workflows#concept-action\">Actions</a> to be used in <a href=\"https://www.dynatrace.com/support/help/shortlink/workflows\">Workflows</a>.  </p>\n<p>These are examples of actions:</p>\n<p><img src=\"assets/workflow-actions.png\" alt=\"workflow-actions\" /></p>","activityList":[{"id":"2.1","name":"Setting up\r","content":"<h2 id=\"settingup\">Setting up</h2>\n<h3 id=\"getthesourcecode\">Get the source code</h3>\n<p>The usual way to create a workflow app involves:</p>\n<ol>\n<li>Creating a regular app using <code>dt-app</code></li>\n<li>Adding the workflow files to the app</li>\n</ol>\n<p>This works and should be used when creating apps, but not for a training session.<br />\nDuring the training session, we must make sure everyone has the same versions of the different dependencies, so that the code is compatible.  </p>\n<p>For this reason, we will instead clone an already created barebone app.</p>\n<p>Chose a directory on your machine and run from the command line:</p>\n<pre><code class=\"hljs bash language-bash\">git <span class=\"hljs-built_in\">clone</span> ssh://git@bitbucket.lab.dynatrace.org/~david.lopes/emails-for-workflows.git\n</code></pre>\n<p>If you can't access bitbucket, or don't have git, etc please download the code <a href=\"https://dynatrace-my.sharepoint.com/:u:/p/david_lopes/EZQpgNEzODtEnnCV5j0ss08BhYGFrdG1K1nZBshbZa1jxw?e=p1wKQ6\">here</a> and extract to a folder.</p>\n<blockquote>\n  <p>Don't worry, this is the same result you would get with <code>npx dt-app create</code>, we are just locking the versions of the dependencies.</p>\n</blockquote>\n<h3 id=\"checkthatyoucanruntheapp\">Check that you can run the app</h3>\n<p>Open the folder in your favourite IDE, I recommend VSCode.<br />\nOpen the file <code>app.config.ts</code> and check that <code>environmentUrl</code> points to your Dynatrace environemnt URL, make sure to use the <code>Gen3</code> URL. </p>\n<p>Run the commands:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-built_in\">npm</span> install\n<span class=\"hljs-built_in\">npm</span> run start\n</code></pre>\n<p>This should open a browser window with the app running.  </p>\n<p><img src=\"assets/app-empty.png\" alt=\"app-running\" /></p>","activityList":[]},{"id":"2.2","name":"Creating a \"Hello World!\" action\r","content":"<h2 id=\"creatingahelloworldaction\">Creating a \"Hello World!\" action</h2>\n<p>Workflow Actions are composed of two main parts:</p>\n<ol>\n<li>The UI (Widget)<ul>\n<li>The user interacts with the UI when configuring the Workflow</li></ul></li>\n<li>The App Function (API)<ul>\n<li>Runs the actual logic of the Action</li></ul></li>\n</ol>\n<h3 id=\"1createthemainfunction\">1 - Create the main function</h3>\n<p>Let's create our main app function, this is where the logic of our action will eventually reside.</p>\n<p>Run this command:</p>\n<pre><code class=\"hljs bash language-bash\">npm run generate:<span class=\"hljs-keyword\">function</span> send-email\n</code></pre>\n<p>You can learn more about the <em>generate:function</em> command <a href=\"https://developer.dynatracelabs.com/reference/app-toolkit/commands/#dt-app-generate-function-name\">here</a>.</p>\n<p>This will create a file called <code>send-email.ts</code> in the <code>api</code> folder, along with some other tests and typescript definitions.</p>\n<p><img src=\"assets/generate-function.png\" alt=\"send-email-ts\" /></p>\n<h3 id=\"2createthewidget\">2 - Create the Widget</h3>\n<p>To create a workflow UI we need to create some files manually.</p>\n<blockquote>\n  <p>Note: this will eventually be streamlined with dt-app</p>\n</blockquote>\n<p>Run this command to create the widgets directory:</p>\n<pre><code class=\"hljs bash language-bash\">mkdir -p widgets/actions/send-email/src\n</code></pre>\n<p>Add the <code>tsconfig.json</code> and <code>src/main.tsx</code> files</p>\n<h4 id=\"tsconfigjson\">tsconfig.json</h4>\n<p>This file goes inside the <code>widgets/actions/send-email</code> directory.</p>\n<pre><code class=\"hljs json language-json\">{\n    <span class=\"hljs-attr\">&quot;extends&quot;</span>: <span class=\"hljs-string\">&quot;../../../tsconfig.json&quot;</span>,\n}  \n</code></pre>\n<h4 id=\"maintsx\">main.tsx</h4>\n<p>This file goes inside the <code>widgets/actions/send-email/src</code> directory.</p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">import</span> { AppRoot, ToastContainer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/strato-components-preview&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom&#x27;</span>;\n\nReactDOM.render(\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppRoot</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ToastContainer</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">AppRoot</span>&gt;</span></span>,\n  <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;send-email-root&#x27;</span>),\n);\n</code></pre>\n<h3 id=\"3declareourfirstaction\">3 - Declare our first action</h3>\n<p>We need to tell Dynatrace that our App includes an Workflow Action.<br />\nThis is done inside the <code>app.config.ts</code> file, inside the <code>app</code> property.</p>\n<pre><code class=\"hljs typescript language-typescript\">actions: [\n      {\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;Send Email&#x27;</span>,\n        <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;Send an email&#x27;</span>,\n        <span class=\"hljs-attr\">icon</span>: <span class=\"hljs-string\">&#x27;CodeIcon&#x27;</span>,\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;send-email&#x27;</span>,\n        <span class=\"hljs-attr\">widget</span>: <span class=\"hljs-string\">&#x27;/actions/send-email&#x27;</span>,\n      },\n    ]\n</code></pre>","activityList":[]},{"id":"2.3","name":"Run the workflow action\r","content":"<h2 id=\"runtheworkflowaction\">Run the workflow action</h2>\n<p>We can run our workflow action without deploying it to Dynatrace.<br />\nThis is very handy, it allows us to rapidly develop and test our action.  </p>\n<p>First, start the app again if you stopped it:</p>\n<pre><code class=\"hljs bash language-bash\">npm run start\n</code></pre>\n<p>One thing to note, if you visit <code>http://localhost:3000/api/send-email</code> you should get the <code>Hello world</code> response. This is our app function running locally!  </p>\n<h3 id=\"devhelper\">Dev helper</h3>\n<p>The dev helper is a feature of the Workflow app.<br />\nThis is hidden from other users, so you must manually navigate to: </p>\n<pre><code class=\"hljs\">&lt;your_3rdgen_environment_url&gt;<span class=\"hljs-regexp\">/ui/</span>apps<span class=\"hljs-regexp\">/dynatrace.automations/</span>dev-helper?src=http:<span class=\"hljs-regexp\">//</span>localhost:<span class=\"hljs-number\">3000</span><span class=\"hljs-regexp\">/widgets/</span>actions/send-email\n</code></pre>\n<p>For now this is a bit boring because we don't have any UI for our Action, but it will be an awesome page soon.</p>\n<p><img src=\"assets/empty-action-dev-helper.png\" alt=\"dev-helper\" /></p>","activityList":[]}]},{"id":"3","name":"Creating a custom action\r","content":"<h2 id=\"creatingacustomaction\">Creating a custom action</h2>\n<p>In this module we will create:</p>\n<ul>\n<li>The <strong>Widget</strong>, this is the part of the Action that the user interacts with.<br /><ul>\n<li>The Widget is a <strong>React</strong> application that is rendered inside the <strong>Workflow UI</strong>.</li></ul></li>\n<li>The <strong>App Function</strong>, this is the part of the <strong>Action</strong> that runs the logic.<br /><ul>\n<li>The <strong>App Function</strong> is a typescript function that runs in the Dynatrace Javascript Runtime.</li></ul></li>\n</ul>\n<hr />\n<p><img src=\"assets/workflow-elements.png\" alt=\"workflow-elements.png\" /></p>","activityList":[{"id":"3.1","name":"Creating the UI\r","content":"<h2 id=\"creatingtheui\">Creating the UI</h2>\n<p>Our goal today is to create an Action that allows users to send emails using Workflows.</p>\n<p>To achieve this our Action should let the user input the fields:</p>\n<ul>\n<li><strong>To</strong>: The email addresses of the recipients</li>\n<li><strong>Subject</strong>: The subject of the email</li>\n<li><strong>Body</strong>: The body of the email</li>\n</ul>\n<p>And here we are developing in React just like in any Dynatrace App.<br />\nThe difference is that we have some useful components that help our Action interact with the rest of the Workflows.  </p>\n<h3 id=\"createthewidgetcode\">Create the widget code</h3>\n<p>Create the file <code>widgets/actions/send-email/src/SendEmailWidget.tsx</code></p>\n<p>With contents:</p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">import</span> { CustomInputEditor, FunctionProps, useWidgetValue, InputEditorWrapper } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/sdk-automation-labs&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Flex } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/strato-components-preview&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { ActionPayload } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/sdk-automation-labs/actions&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { AutomationTextInput, AutomationCodeEditor } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/strato-components-labs&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { FormField } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/strato-components-preview&#x27;</span>;\n\n\n<span class=\"hljs-comment\">// This is a &quot;contract&quot; for our Action, the users will need to pass these parameters</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> WidgetSendEmailRequest {\n    <span class=\"hljs-attr\">to</span>: <span class=\"hljs-built_in\">string</span>;\n    subject: <span class=\"hljs-built_in\">string</span>;\n    body: <span class=\"hljs-built_in\">string</span>;\n}\n\n\n<span class=\"hljs-comment\">// These are some types that we need to hook into the Workflows functionality</span>\n<span class=\"hljs-keyword\">type</span> SendEmailActionPayload = ActionPayload&lt;WidgetSendEmailRequest&gt;\n<span class=\"hljs-keyword\">type</span> SendEmailActionProps = FunctionProps&lt;SendEmailActionPayload&gt;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> SendEmailInputEditor: CustomInputEditor&lt;SendEmailActionPayload&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">props: SendEmailActionProps</span>) =&gt;</span> { \n\n    <span class=\"hljs-comment\">// This hook is provided by the Dynatrace SDK, so that the Action state can be managed by Workflows</span>\n    <span class=\"hljs-keyword\">const</span> { value, useDefaultValue, updateValue } = useWidgetValue&lt;SendEmailActionPayload&gt;(props);\n\n    <span class=\"hljs-comment\">// What the user gets the first time they load the Workflow, you can use helpful defaults here</span>\n    useDefaultValue({\n        <span class=\"hljs-attr\">to</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n        <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n        <span class=\"hljs-attr\">body</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n      });\n\n    <span class=\"hljs-comment\">// Standard React component</span>\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Flex</span> <span class=\"hljs-attr\">gap</span>=<span class=\"hljs-string\">{16}</span> <span class=\"hljs-attr\">flexDirection</span>=<span class=\"hljs-string\">&#x27;column&#x27;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormField</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">{</span>&#x27;<span class=\"hljs-attr\">To</span>&#x27;} <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;send-email-to&#x27;</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AutomationTextInput</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value.to}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(to)</span> =&gt;</span> updateValue({ to })} /&gt;\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormField</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormField</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">{</span>&#x27;<span class=\"hljs-attr\">Subject</span>&#x27;} <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;send-email-subject&#x27;</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AutomationTextInput</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value.subject}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(subject)</span> =&gt;</span> updateValue({ subject })} /&gt;\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormField</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormField</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">{</span>&#x27;<span class=\"hljs-attr\">Body</span>&#x27;} <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;send-email-body&#x27;</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AutomationCodeEditor</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value.body}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(body)</span> =&gt;</span> updateValue({ body })} /&gt;\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormField</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Flex</span>&gt;</span></span>\n    );\n\n}\n\n\nSendEmailInputEditor.displayName = <span class=\"hljs-string\">&#x27;SendEmailInputEditor&#x27;</span>;\n\n<span class=\"hljs-comment\">// This is a helper provided by the Dynatrace SDK, it wraps our component so that it can be used by Workflows</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> SendEmailForm: React.FunctionComponent = InputEditorWrapper(SendEmailInputEditor);\n</code></pre>\n<p>We can now use this Widget in <code>main.tsx</code></p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">import</span> { AppRoot, ToastContainer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/strato-components-preview&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { SendEmailForm } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./SendEmailWidget&#x27;</span>;\n\nReactDOM.render(\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppRoot</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SendEmailForm</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ToastContainer</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">AppRoot</span>&gt;</span></span>,\n  <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;send-email-root&#x27;</span>),\n);\n</code></pre>\n<h3 id=\"codebreakdown\">Code breakdown</h3>\n<p>This is quite a lot, let's break down the code piece by piece:</p>\n<p>First, we declare what our Action payload will look like.<br />\nHere we think about what user defined fields our Action needs to work properly.  </p>\n<blockquote>\n  <p>Note, no usernames/passwords should ever be passed here!</p>\n</blockquote>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> WidgetSendEmailRequest {\n    <span class=\"hljs-attr\">to</span>: <span class=\"hljs-built_in\">string</span>;\n    subject: <span class=\"hljs-built_in\">string</span>;\n    body: <span class=\"hljs-built_in\">string</span>;\n}\n</code></pre>\n<p>The next types are needed to hook some Workflow functionality into our Action.<br />\nYou will see these <code>ActionPayload</code> and <code>FunctionProps</code> types in all Workflows Actions.  </p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">type</span> SendEmailActionPayload = ActionPayload&lt;WidgetSendEmailRequest&gt;\n<span class=\"hljs-keyword\">type</span> SendEmailActionProps = FunctionProps&lt;SendEmailActionPayload&gt;\n</code></pre>\n<p>We then come to the actual React Component that renders the Widget.<br />\nHere you have freedom to create the Widget UI, but we try to stay consistent with the rest of the Workflows UI.  </p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> SendEmailInputEditor: CustomInputEditor&lt;SendEmailActionPayload&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">props: SendEmailActionProps</span>) =&gt;</span> { \n\n    <span class=\"hljs-comment\">// This hook is provided by the Dynatrace SDK, so that the Action state can be managed by Workflows</span>\n    <span class=\"hljs-keyword\">const</span> { value, useDefaultValue, updateValue } = useWidgetValue&lt;SendEmailActionPayload&gt;(props);\n\n    <span class=\"hljs-comment\">// What the user gets the first time they load the Workflow, you can use helpful defaults here</span>\n    useDefaultValue({\n        <span class=\"hljs-attr\">to</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n        <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n        <span class=\"hljs-attr\">body</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n      });\n\n    <span class=\"hljs-comment\">// Standard React component</span>\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Flex</span> <span class=\"hljs-attr\">gap</span>=<span class=\"hljs-string\">{16}</span> <span class=\"hljs-attr\">flexDirection</span>=<span class=\"hljs-string\">&#x27;column&#x27;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormField</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">{</span>&#x27;<span class=\"hljs-attr\">To</span>&#x27;} <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;send-email-to&#x27;</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AutomationTextInput</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value.to}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(to)</span> =&gt;</span> updateValue({ to })} /&gt;\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormField</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormField</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">{</span>&#x27;<span class=\"hljs-attr\">Subject</span>&#x27;} <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;send-email-subject&#x27;</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AutomationTextInput</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value.subject}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(subject)</span> =&gt;</span> updateValue({ subject })} /&gt;\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormField</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormField</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">{</span>&#x27;<span class=\"hljs-attr\">Body</span>&#x27;} <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;send-email-body&#x27;</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AutomationCodeEditor</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value.body}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(body)</span> =&gt;</span> updateValue({ body })} /&gt;\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormField</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Flex</span>&gt;</span></span>\n    );\n\n}\n</code></pre>\n<p>There are some useful Components inside our widget:</p>\n<pre><code class=\"hljs typescript language-typescript\">&lt;AutomationTextInput value={value.to} onChange={<span class=\"hljs-function\">(<span class=\"hljs-params\">to</span>) =&gt;</span> updateValue({ to })} /&gt;\n</code></pre>\n<p>These <code>AutomationTextInput</code> (and <code>AutomationSelect</code>, <code>AutomationCodeEditor</code>) are very handy.<br />\nThey give your inputs auto completion when creating the Workflow, and some other features.  </p>\n<p><img src=\"assets/autocomplete.png\" alt=\"autocomplete\" /></p>\n<h3 id=\"runningthewidget\">Running the Widget</h3>\n<p>If we refresh the dev helper page we should see our Widget!</p>\n<p><img src=\"assets/widget-01.png\" alt=\"widget-01\" /></p>\n<p>We can hit the <code>Run action</code> button to invoke our <code>Hello world</code> function.<br />\nNote that you can only see the results in the browser dev tools console.  </p>\n<p><img src=\"assets/workflow-01-run.png\" alt=\"workflow-01-run.png\" />  </p>\n<p>The action is not using the input fields yet, we will do that next.</p>","activityList":[]},{"id":"3.2","name":"Creating the Action\r","content":"<h2 id=\"creatingtheaction\">Creating the Action</h2>\n<p>We have \"hello world\" action, we need to convert it to a \"send email\" action.  </p>\n<h3 id=\"addingthecode\">Adding the code</h3>\n<p>Let's edit the <code>api/send-email.ts</code> file.</p>\n<p>Firs, we will import a base action class from the sdk:</p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">import</span> { BaseAction } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/sdk-automation-labs/actions&#x27;</span>;\n</code></pre>\n<p>Then, similar to the Widget UI, we will let users know what are the parameters of this action: </p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> SendEmailActionRequest {\n  <span class=\"hljs-attr\">to</span>: <span class=\"hljs-built_in\">string</span>;\n  subject: <span class=\"hljs-built_in\">string</span>;\n  body: <span class=\"hljs-built_in\">string</span>;\n}\n</code></pre>\n<p>We must also let Workflows know what is the response format of our Action.<br />\nThis can later be used by other Actions as input.  </p>\n<p>We will return the result from sending an email, and the list of recipients.<br />\nThis is arbitrary, you should decide what data is important to return.  </p>\n<p>For instance, the <code>ServiceNow Create Incident Action</code> returns the incident ID.</p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> SendEmailActionResultType {\n  <span class=\"hljs-attr\">result</span>: <span class=\"hljs-built_in\">string</span>;\n  recipients: <span class=\"hljs-built_in\">string</span>[];\n}\n</code></pre>\n<p>Finally we have the action itself, it is a class that has two important methods:</p>\n<ul>\n<li>initialize: Allows you to validate the payload and return an error if something is wrong</li>\n<li>run: The actual logic of the action</li>\n</ul>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SendEmailAction</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BaseAction</span>&lt;<span class=\"hljs-title\">SendEmailActionResultType</span>&gt; </span>{\n  payload!: SendEmailActionRequest;\n\n  <span class=\"hljs-comment\">/**\n   * On the initializer of our class we validate the payload.\n   * This is a good place to validate the payload and throw an error if something is wrong.\n   * If the payload is valid, we can store it in the class instance for later use.\n   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{SendEmailActionRequest}</span> <span class=\"hljs-variable\">rawPayload</span></span> - The JSON object that the user passes to the action.\n   */</span>\n  <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">async</span> initialize(rawPayload?: SendEmailActionRequest): <span class=\"hljs-built_in\">Promise</span>&lt;<span class=\"hljs-built_in\">void</span>&gt; {\n\n    <span class=\"hljs-comment\">// Note this is not an extensive check, usually libraries like Zod are used.</span>\n    <span class=\"hljs-keyword\">if</span> (!rawPayload) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;Payload is required&#x27;</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (!rawPayload.to) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;to is required&#x27;</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (!rawPayload.subject) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;subject is required&#x27;</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (!rawPayload.body) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;body is required&#x27;</span>);\n    }\n\n    <span class=\"hljs-built_in\">this</span>.payload = rawPayload;\n    }\n\n  <span class=\"hljs-comment\">/**\n   * run is the main function of the action.\n   */</span>\n  <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">async</span> run(): <span class=\"hljs-built_in\">Promise</span>&lt;SendEmailActionResultType&gt; {\n\n    <span class=\"hljs-comment\">// This is where all the action logic must be, in our case we want to:</span>\n    <span class=\"hljs-comment\">// 1. Send the email with the parameters of the action</span>\n    <span class=\"hljs-comment\">// 2. Return the result of the action</span>\n    <span class=\"hljs-comment\">// 3. If something goes wrong, throw an error</span>\n\n    <span class=\"hljs-comment\">// We are using an HTTP client to send the email</span>\n    <span class=\"hljs-comment\">// Some things like SMTP cannot be used on the Dynatrace Javascript Runtime</span>\n    <span class=\"hljs-comment\">// There is no native support for crypto, fs, env, etc yet and some of these are required for the SMTP protocol</span>\n\n    <span class=\"hljs-comment\">// This will later be stored in our app Settings.</span>\n    <span class=\"hljs-comment\">// This can also be stored as a Credential Vault entry in Dynatrace</span>\n    <span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-string\">&quot;https://4o7lruuctdihsr6lmw2oqpdzpa0vfbfk.lambda-url.us-east-1.on.aws&quot;</span>;\n\n    <span class=\"hljs-keyword\">const</span> body = {\n      <span class=\"hljs-attr\">to</span>: <span class=\"hljs-built_in\">this</span>.payload.to,\n      <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-built_in\">this</span>.payload.subject,\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">this</span>.payload.body,\n    }\n\n    <span class=\"hljs-comment\">// Use the fetch api to send the email</span>\n    <span class=\"hljs-built_in\">this</span>.logger.info(<span class=\"hljs-string\">`Sending email to <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.payload.to}</span> with subject &#x27;<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.payload.subject}</span>&#x27;`</span>);\n    <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> fetch(url, {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;POST&#x27;</span>,\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(body),\n      <span class=\"hljs-attr\">headers</span>: {\n        <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>: <span class=\"hljs-string\">&#x27;application/json&#x27;</span>\n      }\n    });\n\n    <span class=\"hljs-comment\">// Check if the response is ok, if not throw an error</span>\n    <span class=\"hljs-keyword\">if</span> (!response.ok) {\n      <span class=\"hljs-keyword\">const</span> errorMessage = <span class=\"hljs-string\">`Error sending email: <span class=\"hljs-subst\">${response.statusText}</span>, <span class=\"hljs-subst\">${<span class=\"hljs-keyword\">await</span> response.text()}</span>`</span>;\n      <span class=\"hljs-built_in\">this</span>.logger.error(errorMessage);\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(errorMessage);\n    }\n\n    <span class=\"hljs-comment\">// Return the result of the action</span>\n    <span class=\"hljs-keyword\">const</span> recipients = <span class=\"hljs-built_in\">this</span>.payload.to.split(<span class=\"hljs-string\">&#x27;,&#x27;</span>);\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">result</span>: <span class=\"hljs-string\">`Email &#x27;<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.payload.subject}</span>&#x27; sent successfully to <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.payload.to}</span>`</span>,\n      recipients,\n    };\n\n  }\n\n}\n</code></pre>\n<p>And at the very end of the file, we export a function that will be used by the app to run the action:</p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">payload?: SendEmailActionRequest</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SendEmailAction().runAction(payload);\n}\n</code></pre>\n<p>Here is the full contents of the file:</p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">import</span> { BaseAction } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/sdk-automation-labs/actions&#x27;</span>;\n\n<span class=\"hljs-comment\">// This is what the users need to pass to call this action</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> SendEmailActionRequest {\n  <span class=\"hljs-attr\">to</span>: <span class=\"hljs-built_in\">string</span>;\n  subject: <span class=\"hljs-built_in\">string</span>;\n  body: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-comment\">// This is what our Custom Action returns to the users</span>\n<span class=\"hljs-comment\">// These fields can later be used by other actions in the Workflow</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> SendEmailActionResultType {\n  <span class=\"hljs-attr\">result</span>: <span class=\"hljs-built_in\">string</span>;\n  recipients: <span class=\"hljs-built_in\">string</span>[];\n}\n\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SendEmailAction</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BaseAction</span>&lt;<span class=\"hljs-title\">SendEmailActionResultType</span>&gt; </span>{\n  payload!: SendEmailActionRequest;\n\n  <span class=\"hljs-comment\">/**\n   * On the initializer of our class we validate the payload.\n   * This is a good place to validate the payload and throw an error if something is wrong.\n   * If the payload is valid, we can store it in the class instance for later use.\n   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{SendEmailActionRequest}</span> <span class=\"hljs-variable\">rawPayload</span></span> - The JSON object that the user passes to the action.\n   */</span>\n  <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">async</span> initialize(rawPayload?: SendEmailActionRequest): <span class=\"hljs-built_in\">Promise</span>&lt;<span class=\"hljs-built_in\">void</span>&gt; {\n\n    <span class=\"hljs-comment\">// Note this is not an extensive check, usually libraries like Zod are used.</span>\n    <span class=\"hljs-keyword\">if</span> (!rawPayload) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;Payload is required&#x27;</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (!rawPayload.to) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;to is required&#x27;</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (!rawPayload.subject) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;subject is required&#x27;</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (!rawPayload.body) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;body is required&#x27;</span>);\n    }\n\n    <span class=\"hljs-built_in\">this</span>.payload = rawPayload;\n    }\n\n  <span class=\"hljs-comment\">/**\n   * run is the main function of the action.\n   */</span>\n  <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">async</span> run(): <span class=\"hljs-built_in\">Promise</span>&lt;SendEmailActionResultType&gt; {\n\n    <span class=\"hljs-comment\">// This is where all the action logic must be, in our case we want to:</span>\n    <span class=\"hljs-comment\">// 1. Send the email with the parameters of the action</span>\n    <span class=\"hljs-comment\">// 2. Return the result of the action</span>\n    <span class=\"hljs-comment\">// 3. If something goes wrong, throw an error</span>\n\n    <span class=\"hljs-comment\">// We are using an HTTP client to send the email</span>\n    <span class=\"hljs-comment\">// Some things like SMTP cannot be used on the Dynatrace Javascript Runtime</span>\n    <span class=\"hljs-comment\">// There is no native support for crypto, fs, env, etc yet and some of these are required for the SMTP protocol</span>\n\n    <span class=\"hljs-comment\">// This will later be stored in our app Settings.</span>\n    <span class=\"hljs-comment\">// This can also be stored as a Credential Vault entry in Dynatrace</span>\n    <span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-string\">&quot;https://4o7lruuctdihsr6lmw2oqpdzpa0vfbfk.lambda-url.us-east-1.on.aws&quot;</span>;\n\n    <span class=\"hljs-keyword\">const</span> body = {\n      <span class=\"hljs-attr\">to</span>: <span class=\"hljs-built_in\">this</span>.payload.to,\n      <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-built_in\">this</span>.payload.subject,\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">this</span>.payload.body,\n    }\n\n    <span class=\"hljs-comment\">// Use the fetch api to send the email</span>\n    <span class=\"hljs-built_in\">this</span>.logger.info(<span class=\"hljs-string\">`Sending email to <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.payload.to}</span> with subject &#x27;<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.payload.subject}</span>&#x27;`</span>);\n    <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> fetch(url, {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;POST&#x27;</span>,\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(body),\n      <span class=\"hljs-attr\">headers</span>: {\n        <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>: <span class=\"hljs-string\">&#x27;application/json&#x27;</span>\n      }\n    });\n\n    <span class=\"hljs-comment\">// Check if the response is ok, if not throw an error</span>\n    <span class=\"hljs-keyword\">if</span> (!response.ok) {\n      <span class=\"hljs-keyword\">const</span> errorMessage = <span class=\"hljs-string\">`Error sending email: <span class=\"hljs-subst\">${response.statusText}</span>, <span class=\"hljs-subst\">${<span class=\"hljs-keyword\">await</span> response.text()}</span>`</span>;\n      <span class=\"hljs-built_in\">this</span>.logger.error(errorMessage);\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(errorMessage);\n    }\n    <span class=\"hljs-built_in\">this</span>.logger.info(<span class=\"hljs-string\">`Email &#x27;<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.payload.subject}</span>&#x27; sent successfully to <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.payload.to}</span>`</span>);\n\n    <span class=\"hljs-comment\">// Return the result of the action</span>\n    <span class=\"hljs-keyword\">const</span> recipients = <span class=\"hljs-built_in\">this</span>.payload.to.split(<span class=\"hljs-string\">&#x27;,&#x27;</span>);\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">result</span>: <span class=\"hljs-string\">`Email &#x27;<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.payload.subject}</span>&#x27; sent successfully to <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.payload.to}</span>`</span>,\n      recipients,\n    };\n\n  }\n\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">payload?: SendEmailActionRequest</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SendEmailAction().runAction(payload);\n}\n</code></pre>\n<p>This is all we need to do to create a Workflow Action and we can now test the Action from the Workflow helper.  </p>\n<p>In the console logs you will see:</p>\n<ol>\n<li>Every log that the action generates (these can be seen by the users of the Action later)</li>\n<li>The result of the action</li>\n</ol>\n<p><img src=\"assets/workflow-01-working.png\" alt=\"workflow-01-working.png\" /></p>\n<h3 id=\"thejavascriptruntime\">The Javascript Runtime</h3>\n<p>You probably noticed that we are not sending the email using <code>SMTP</code>.<br />\nInstead we are using a <code>lambda</code> function that was created in <code>AWS</code>.  </p>\n<p>The reason for this is that the <a href=\"https://developer.dynatrace.com/reference/javascript-runtime/\">Dynatrace Javascript Runtime</a> does not support some server side NodeJS libraries.<br />\nYou can't access the filesystem, crypto, env variables, etc. Things that are not based on Web APIs.  </p>\n<p>You can test this by attempting to import the <code>fs</code> module in the action code</p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;fs&#x27;</span>;\n</code></pre>\n<p>This is being researched <a href=\"https://dev-jira.dynatrace.org/browse/PS-3862\">as part of this ticket</a>  </p>\n<p>For this reason we can't use SMTP, the protocol requires some libraries which are not included in the runtime.  </p>\n<p>The workaround we are using is a lambda function that uses SNMP instead.  </p>","activityList":[]},{"id":"3.3","name":"Deploying\r","content":"<h2 id=\"deploying\">Deploying</h2>\n<p>To deploy our app to Dynatrace, simply run:</p>\n<pre><code class=\"hljs bash language-bash\">npm run deploy\n</code></pre>\n<p><img src=\"assets/app-deploy.png\" alt=\"app-deploy\" /></p>\n<h3 id=\"usingtheaction\">Using the action</h3>\n<p>Now navigate to <code>Workflows</code> and create a new <code>Workflow</code>.<br />\nAdding an Action should show you your Action Icon:</p>\n<p><img src=\"assets/workflow-action-icon.png\" alt=\"workflow-action-icon.png\" /></p>\n<p>Attempting to run the action should show you a warning in the logs:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">An</span> error occurred: Blocked request to &#x27;https://<span class=\"hljs-number\">4</span>o<span class=\"hljs-number\">7</span>lruuctdihsr<span class=\"hljs-number\">6</span>lmw<span class=\"hljs-number\">2</span>oqpdzpa<span class=\"hljs-number\">0</span>vfbfk.lambda-url.us-east-<span class=\"hljs-number\">1</span>.<span class=\"hljs-literal\">on</span>.aws/&#x27; (host not in allowlist). To find out about how to manage allowed domains please visit https://dt-url.net/<span class=\"hljs-literal\">allow</span>-outbound-connections\n</code></pre>\n<p><img src=\"assets/workflow-error.png\" alt=\"Workflow error\" /></p>\n<p>This is a security mechanism, only allowed domains can be accessed from the Dynatrace Javascript Runtime.<br />\nWe can go to <code>Settings &gt; Preferences &gt; Limit outbound connections</code></p>\n<p>And add the domain:</p>\n<p><code>4o7lruuctdihsr6lmw2oqpdzpa0vfbfk.lambda-url.us-east-1.on.aws</code>  </p>\n<p><img src=\"assets/settings-allow-domain.png\" alt=\"Settings allow domain\" /></p>\n<p>Running the workflow again should now work:</p>\n<p><img src=\"assets/widget-success.png\" alt=\"Workflow success\" /></p>\n<h3 id=\"noteaboutappconfigts\">Note about app.config.ts</h3>\n<p>This app has a slightly different <code>app.config.ts</code> file.<br />\nIt creates an App ID that is unique per developer.  </p>\n<p>This is done so that we can all share the same environment.  Otherwise multiple deploys would overwrite each other.</p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">const</span> username = userInfo().username;\n<span class=\"hljs-keyword\">const</span> appId = <span class=\"hljs-string\">`my.emails.<span class=\"hljs-subst\">${username}</span>`</span>;\n<span class=\"hljs-keyword\">const</span> appName = <span class=\"hljs-string\">`Emails for Worflows (<span class=\"hljs-subst\">${username}</span>)`</span>;\n<span class=\"hljs-keyword\">const</span> pkgVersion = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${process.env.npm_package_version}</span>-dev.<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Date</span>.now()}</span>`</span>;\n</code></pre>\n<p>This is used internally in Dynatrace as well, so that multiple developers can share the same environment.<br />\nThe version also appends a timestamp so that we can deploy multiple times without overwriting each other.   </p>\n<p>If you visit <code>Hub &gt; Manage</code> you can see the list of deployed apps and their versions.  </p>\n<p><img src=\"assets/hub-list.png\" alt=\"Hub manage\" /></p>","activityList":[]}]},{"id":"4","name":"Settings for Apps (Advanced)\r","content":"<h2 id=\"settingsforappsadvanced\">Settings for Apps (Advanced)</h2>\n<p>Sometimes it is necessary for the user to store URLs, usernames, passwords and other fields to execute a certain action.<br />\nThink of the Jira integration, the Workflow Action needs to know how to connect to Jira.  </p>\n<p>We do not want to expose these values as the Action Inputs, because these can be accessed by all users.<br />\nWe can use the Settings 2.0 Framework for that, so the user has a secure mechanism to store this information.  </p>\n<p>You can find documentation about settings <a href=\"https://developer.dynatracelabs.com/develop/data/app-settings/\">here</a>.</p>","activityList":[{"id":"4.1","name":"Creating settings\r","content":"<h2 id=\"creatingsettings\">Creating settings</h2>\n<p>First, create the folder <code>settings/schemas</code> in the root of our project.  </p>\n<pre><code class=\"hljs bash language-bash\">mkdir -p settings/schemas\n</code></pre>\n<p>Create the file <code>EmailConnections.schema.json</code> in that folder.  </p>\n<pre><code class=\"hljs typescript language-typescript\">{\n    <span class=\"hljs-string\">&quot;schemaId&quot;</span>: <span class=\"hljs-string\">&quot;connection&quot;</span>,\n    <span class=\"hljs-string\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;Emails for Workflows&quot;</span>,\n    <span class=\"hljs-string\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;0.0.1&quot;</span>,\n    <span class=\"hljs-string\">&quot;dynatrace&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,\n    <span class=\"hljs-string\">&quot;ordered&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">&quot;versionInfo&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n    <span class=\"hljs-string\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;Credentials for Emails for Workflows&quot;</span>,\n    <span class=\"hljs-string\">&quot;documentation&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n    <span class=\"hljs-string\">&quot;summaryPattern&quot;</span>: <span class=\"hljs-string\">&quot;{name}&quot;</span>,\n    <span class=\"hljs-string\">&quot;multiObject&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">&quot;maxObjects&quot;</span>: <span class=\"hljs-number\">100</span>,\n    <span class=\"hljs-string\">&quot;autoMigratable&quot;</span>: <span class=\"hljs-string\">&quot;always&quot;</span>,\n    <span class=\"hljs-string\">&quot;types&quot;</span>: {},\n    <span class=\"hljs-string\">&quot;properties&quot;</span>: {\n      <span class=\"hljs-string\">&quot;name&quot;</span>: {\n        <span class=\"hljs-string\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;Connection name&quot;</span>,\n        <span class=\"hljs-string\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;The name of the Email connection&quot;</span>,\n        <span class=\"hljs-string\">&quot;documentation&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n        <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;text&quot;</span>,\n        <span class=\"hljs-string\">&quot;nullable&quot;</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-string\">&quot;default&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n        <span class=\"hljs-string\">&quot;constraints&quot;</span>: [\n          {\n            <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;NOT_BLANK&quot;</span>\n          }\n        ]\n      },\n      <span class=\"hljs-string\">&quot;url&quot;</span>: {\n        <span class=\"hljs-string\">&quot;displayName&quot;</span>: <span class=\"hljs-string\">&quot;Lambda function URL&quot;</span>,\n        <span class=\"hljs-string\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;URL of the lambda function&quot;</span>,\n        <span class=\"hljs-string\">&quot;forceSecretResubmission&quot;</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-string\">&quot;documentation&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n        <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;text&quot;</span>,\n        <span class=\"hljs-string\">&quot;subType&quot;</span>: <span class=\"hljs-string\">&quot;url&quot;</span>,\n        <span class=\"hljs-string\">&quot;nullable&quot;</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-string\">&quot;default&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n        <span class=\"hljs-string\">&quot;constraints&quot;</span>: [\n          {\n            <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;NOT_BLANK&quot;</span>\n          },\n          {\n            <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;PATTERN&quot;</span>,\n            <span class=\"hljs-string\">&quot;customMessage&quot;</span>: <span class=\"hljs-string\">&quot;The URL must be secure (https://) and must not contain a trailing slash.&quot;</span>,\n            <span class=\"hljs-string\">&quot;pattern&quot;</span>: <span class=\"hljs-string\">&quot;^https://.*[^/]$&quot;</span>\n          }\n        ]\n      }\n    },\n    <span class=\"hljs-string\">&quot;schemaConstraints&quot;</span>: [\n      {\n        <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;UNIQUE&quot;</span>,\n        <span class=\"hljs-string\">&quot;customMessage&quot;</span>: <span class=\"hljs-string\">&quot;A connection with the same name already exists. Please provide a different name.&quot;</span>,\n        <span class=\"hljs-string\">&quot;uniqueProperties&quot;</span>: [<span class=\"hljs-string\">&quot;name&quot;</span>]\n      }\n    ],\n    <span class=\"hljs-string\">&quot;constraints&quot;</span>: [\n      {\n        <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;SECRET_RESUBMISSION&quot;</span>,\n        <span class=\"hljs-string\">&quot;checkAllProperties&quot;</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-string\">&quot;customMessage&quot;</span>: <span class=\"hljs-string\">&quot;The URL has changed. Please re-enter your credentials.&quot;</span>\n      }\n    ]\n  }\n</code></pre>\n<blockquote>\n  <p>Tip: During the development of this JSON document, you can add the schema as a root attribute.<br />\n  This will give you intellisense and validation in your IDE. Don't forget to remove it before deploying.<br />\n  Alternatively, configure your IDE to validate JSON files against a schema.  </p>\n</blockquote>\n<pre><code class=\"hljs json language-json\">&quot;$schema&quot;: &quot;https://developer.dynatrace.com/docs-assets/schema_strict_apps.json&quot;,\n</code></pre>\n<p>Deploying the app with this schema will create a new Settings Schema in Dynatrace.<br />\nYou can access it by visiting the <code>Settings</code> app, and heading to <code>Dynatrace Apps &gt; Emails for Workflows</code>.  </p>\n<p>Let's store the lambda function here and retrieve it during the Action execution.  </p>\n<p><img src=\"assets/workflow-settings.png\" alt=\"workflow-settings.png\" /></p>","activityList":[]},{"id":"4.2","name":"Updating the Action\r","content":"<h2 id=\"updatingtheaction\">Updating the Action</h2>\n<p>We don't want to hardcode the lambda function URL anymore, so let's update the Action to use the Settings 2.0 framework.   </p>\n<h3 id=\"creatingabaseconnectionclass\">Creating a BaseConnection class</h3>\n<p>We need to wrap our settings object into a BaseConnection class, so that it can later be used in the Widget.  </p>\n<p>Create the folder <code>src/shared/connections</code> </p>\n<pre><code class=\"hljs bash language-bash\">mkdir -p src/shared/connections\n</code></pre>\n<p>Create the file <code>src/shared/connections/email-connection.ts</code><br />\nThis a helper class that allows us to get a connection from the Settings 2.0 framework.  </p>\n<p>This is using <code>getConnection</code>, a method from the SDK that retrieves a connection from the Settings 2.0 framework.  </p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">import</span> { BaseConnection, getConnection } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/sdk-automation-labs/actions&#x27;</span>;\n\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EmailConnection</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BaseConnection</span> </span>{\n    <span class=\"hljs-keyword\">private</span> url!: <span class=\"hljs-built_in\">string</span>;\n\n    initialize(payload: {<span class=\"hljs-attr\">url</span>: <span class=\"hljs-built_in\">string</span>}): <span class=\"hljs-built_in\">this</span> {\n\n    <span class=\"hljs-keyword\">if</span> (!payload.url) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;url is required&#x27;</span>);\n    }\n\n      <span class=\"hljs-built_in\">this</span>.url = payload.url;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>;\n    }\n\n    getUrl(): <span class=\"hljs-built_in\">string</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.url;\n    }\n\n    <span class=\"hljs-keyword\">static</span> getEmailSettings(connectionId: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-built_in\">Promise</span>&lt;EmailConnection&gt; {\n      <span class=\"hljs-keyword\">return</span> getConnection(connectionId, <span class=\"hljs-function\">(<span class=\"hljs-params\">connectionValue: unknown</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> EmailConnection().initialize(connectionValue <span class=\"hljs-keyword\">as</span> {<span class=\"hljs-attr\">url</span>: <span class=\"hljs-built_in\">string</span>});\n      });\n    }\n}\n</code></pre>\n<h3 id=\"updatingtheaction-1\">Updating the Action</h3>\n<p>Change the action code so that it retrieves the lambda function URL from the settings object.   </p>\n<p>Import our class:</p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">import</span> { EmailConnection } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../src/shared/connections/email-connection&#x27;</span>;\n</code></pre>\n<p>Update our request schema, it now must also receive a <code>connectionId</code> string.<br />\nThis is the Settings 2.0 object ID that we will retrieve later.  </p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> SendEmailActionRequest {\n  <span class=\"hljs-attr\">connectionId</span>: <span class=\"hljs-built_in\">string</span>;\n  to: <span class=\"hljs-built_in\">string</span>;\n  subject: <span class=\"hljs-built_in\">string</span>;\n  body: <span class=\"hljs-built_in\">string</span>;\n}\n</code></pre>\n<p>Change the url line to:</p>\n<pre><code class=\"hljs typescript language-typescript\">    <span class=\"hljs-keyword\">const</span> emailSettings = <span class=\"hljs-keyword\">await</span> EmailConnection.getEmailSettings(<span class=\"hljs-built_in\">this</span>.payload.connectionId);\n    <span class=\"hljs-keyword\">const</span> url = emailSettings.getUrl();\n</code></pre>\n<p>The final file should look like this:</p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">import</span> { BaseAction } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/sdk-automation-labs/actions&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { EmailConnection } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../src/shared/connections/email-connection&#x27;</span>;\n\n\n<span class=\"hljs-comment\">// This is what the users need to pass to call this action</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> SendEmailActionRequest {\n  <span class=\"hljs-attr\">connectionId</span>: <span class=\"hljs-built_in\">string</span>;\n  to: <span class=\"hljs-built_in\">string</span>;\n  subject: <span class=\"hljs-built_in\">string</span>;\n  body: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-comment\">// This is what our Custom Action returns to the users</span>\n<span class=\"hljs-comment\">// These fields can later be used by other actions in the Workflow</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> SendEmailActionResultType {\n  <span class=\"hljs-attr\">result</span>: <span class=\"hljs-built_in\">string</span>;\n  recipients: <span class=\"hljs-built_in\">string</span>[];\n}\n\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SendEmailAction</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BaseAction</span>&lt;<span class=\"hljs-title\">SendEmailActionResultType</span>&gt; </span>{\n  payload!: SendEmailActionRequest;\n\n  <span class=\"hljs-comment\">/**\n   * On the initializer of our class we validate the payload.\n   * This is a good place to validate the payload and throw an error if something is wrong.\n   * If the payload is valid, we can store it in the class instance for later use.\n   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{SendEmailActionRequest}</span> <span class=\"hljs-variable\">rawPayload</span></span> - The JSON object that the user passes to the action.\n   */</span>\n  <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">async</span> initialize(rawPayload?: SendEmailActionRequest): <span class=\"hljs-built_in\">Promise</span>&lt;<span class=\"hljs-built_in\">void</span>&gt; {\n\n    <span class=\"hljs-comment\">// Note this is not an extensive check, usually libraries like Zod are used.</span>\n    <span class=\"hljs-keyword\">if</span> (!rawPayload) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;Payload is required&#x27;</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (!rawPayload.to) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;to is required&#x27;</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (!rawPayload.subject) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;subject is required&#x27;</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (!rawPayload.body) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;body is required&#x27;</span>);\n    }\n\n    <span class=\"hljs-built_in\">this</span>.payload = rawPayload;\n    }\n\n  <span class=\"hljs-comment\">/**\n   * run is the main function of the action.\n   */</span>\n  <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">async</span> run(): <span class=\"hljs-built_in\">Promise</span>&lt;SendEmailActionResultType&gt; {\n\n    <span class=\"hljs-comment\">// This is where all the action logic must be, in our case we want to:</span>\n    <span class=\"hljs-comment\">// 1. Send the email with the parameters of the action</span>\n    <span class=\"hljs-comment\">// 2. Return the result of the action</span>\n    <span class=\"hljs-comment\">// 3. If something goes wrong, throw an error</span>\n\n    <span class=\"hljs-comment\">// We are using an HTTP client to send the email</span>\n    <span class=\"hljs-comment\">// Some things like SMTP cannot be used on the Dynatrace Javascript Runtime</span>\n    <span class=\"hljs-comment\">// There is no native support for crypto, fs, env, etc yet and some of these are required for the SMTP protocol</span>\n\n    <span class=\"hljs-comment\">// Retrieve the email settings from the connection</span>\n    <span class=\"hljs-keyword\">const</span> emailSettings = <span class=\"hljs-keyword\">await</span> EmailConnection.getEmailSettings(<span class=\"hljs-built_in\">this</span>.payload.connectionId);\n    <span class=\"hljs-keyword\">const</span> url = emailSettings.getUrl();\n\n\n    <span class=\"hljs-keyword\">const</span> body = {\n      <span class=\"hljs-attr\">to</span>: <span class=\"hljs-built_in\">this</span>.payload.to,\n      <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-built_in\">this</span>.payload.subject,\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">this</span>.payload.body,\n    }\n\n    <span class=\"hljs-comment\">// Use the fetch api to send the email</span>\n    <span class=\"hljs-built_in\">this</span>.logger.info(<span class=\"hljs-string\">`Sending email to <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.payload.to}</span> with subject &#x27;<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.payload.subject}</span>&#x27;`</span>);\n    <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> fetch(url, {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;POST&#x27;</span>,\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(body),\n      <span class=\"hljs-attr\">headers</span>: {\n        <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>: <span class=\"hljs-string\">&#x27;application/json&#x27;</span>\n      }\n    });\n\n    <span class=\"hljs-comment\">// Check if the response is ok, if not throw an error</span>\n    <span class=\"hljs-keyword\">if</span> (!response.ok) {\n      <span class=\"hljs-keyword\">const</span> errorMessage = <span class=\"hljs-string\">`Error sending email: <span class=\"hljs-subst\">${response.statusText}</span>, <span class=\"hljs-subst\">${<span class=\"hljs-keyword\">await</span> response.text()}</span>`</span>;\n      <span class=\"hljs-built_in\">this</span>.logger.error(errorMessage);\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(errorMessage);\n    }\n    <span class=\"hljs-built_in\">this</span>.logger.info(<span class=\"hljs-string\">`Email &#x27;<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.payload.subject}</span>&#x27; sent successfully to <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.payload.to}</span>`</span>);\n\n    <span class=\"hljs-comment\">// Return the result of the action</span>\n    <span class=\"hljs-keyword\">const</span> recipients = <span class=\"hljs-built_in\">this</span>.payload.to.split(<span class=\"hljs-string\">&#x27;,&#x27;</span>);\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">result</span>: <span class=\"hljs-string\">`Email &#x27;<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.payload.subject}</span>&#x27; sent successfully to <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.payload.to}</span>`</span>,\n      recipients,\n    };\n\n  }\n\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">payload?: SendEmailActionRequest</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SendEmailAction().runAction(payload);\n}\n</code></pre>\n<h3 id=\"updateappscopes\">Update App scopes</h3>\n<p>We need an extra permission on our app, in order to read settings.<br />\nUpdate the <code>app.scopes</code> attribute in the <code>app.config.ts</code> file, adding a new entry:  </p>\n<pre><code class=\"hljs typescript language-typescript\">{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;app-settings:objects:read&#x27;</span>, <span class=\"hljs-attr\">comment</span>: <span class=\"hljs-string\">&#x27;Reading Email Connection from Settings&#x27;</span> }\n</code></pre>","activityList":[]},{"id":"4.3","name":"Update the Widget\r","content":"<h2 id=\"updatethewidget\">Update the Widget</h2>\n<p>Finally, we need to give the user the ability to configure the connection.<br />\nThis is done by adding a new Component to the Widget.  </p>\n<p>Luckily the SDK has a nice helper for this.  </p>\n<p>Edit the file <code>widgets/actions/send-email/src/SendEmailWidget.tsx</code>  </p>\n<p>Import the <code>AutomationConnectionPicker</code> component:</p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">import</span> { AutomationConnectionPicker } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/strato-components-labs/automation-widgets&#x27;</span>;\n</code></pre>\n<p>Update our Widget Interface to also receive a <code>connectionId</code> string:</p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> WidgetSendEmailRequest {\n    <span class=\"hljs-attr\">connectionId</span>: <span class=\"hljs-built_in\">string</span>;\n    to: <span class=\"hljs-built_in\">string</span>;\n    subject: <span class=\"hljs-built_in\">string</span>;\n    body: <span class=\"hljs-built_in\">string</span>;\n}\n</code></pre>\n<p>Update  the call to <code>useDefaultValue</code>:</p>\n<pre><code class=\"hljs typescript language-typescript\"> useDefaultValue({\n        <span class=\"hljs-attr\">connectionId</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n        <span class=\"hljs-attr\">to</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n        <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n        <span class=\"hljs-attr\">body</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n      });\n</code></pre>\n<p>Finally, add the <code>FormField</code> for the <code>connectionId</code> as the first element inside <code>Flex</code></p>\n<pre><code class=\"hljs typescript language-typescript\">            &lt;FormField label=<span class=\"hljs-string\">&#x27;Connection&#x27;</span> id=<span class=\"hljs-string\">&#x27;connection-picker&#x27;</span>&gt;\n                <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AutomationConnectionPicker</span>\n                    <span class=\"hljs-attr\">schema</span>=<span class=\"hljs-string\">{</span>&#x27;<span class=\"hljs-attr\">connection</span>&#x27;}\n                    <span class=\"hljs-attr\">connectionId</span>=<span class=\"hljs-string\">{value.connectionId}</span>\n                    <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(connectionId)</span> =&gt;</span> updateValue({ connectionId })}\n                /&gt;</span>\n            &lt;/FormField&gt;\n</code></pre>\n<p>This is how the final file should look like:</p>\n<pre><code class=\"hljs typescript language-typescript\"><span class=\"hljs-keyword\">import</span> { CustomInputEditor, FunctionProps, useWidgetValue, InputEditorWrapper } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/sdk-automation-labs&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { AutomationConnectionPicker } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/strato-components-labs/automation-widgets&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Flex } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/strato-components-preview&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { ActionPayload } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/sdk-automation-labs/actions&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { AutomationTextInput, AutomationCodeEditor } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/strato-components-labs&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { FormField } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace/strato-components-preview&#x27;</span>;\n\n\n<span class=\"hljs-comment\">// This is a &quot;contract&quot; for our Action, the users will need to pass these parameters</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> WidgetSendEmailRequest {\n    <span class=\"hljs-attr\">connectionId</span>: <span class=\"hljs-built_in\">string</span>;\n    to: <span class=\"hljs-built_in\">string</span>;\n    subject: <span class=\"hljs-built_in\">string</span>;\n    body: <span class=\"hljs-built_in\">string</span>;\n}\n\n\n<span class=\"hljs-comment\">// These are some types that we need to hook into the Workflows functionality</span>\n<span class=\"hljs-keyword\">type</span> SendEmailActionPayload = ActionPayload&lt;WidgetSendEmailRequest&gt;\n<span class=\"hljs-keyword\">type</span> SendEmailActionProps = FunctionProps&lt;SendEmailActionPayload&gt;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> SendEmailInputEditor: CustomInputEditor&lt;SendEmailActionPayload&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">props: SendEmailActionProps</span>) =&gt;</span> { \n\n    <span class=\"hljs-comment\">// This hook is provided by the Dynatrace SDK, so that the Action state can be managed by Workflows</span>\n    <span class=\"hljs-keyword\">const</span> { value, useDefaultValue, updateValue } = useWidgetValue&lt;SendEmailActionPayload&gt;(props);\n\n    <span class=\"hljs-comment\">// What the user gets the first time they load the Workflow, you can use helpful defaults here</span>\n    useDefaultValue({\n        <span class=\"hljs-attr\">connectionId</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n        <span class=\"hljs-attr\">to</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n        <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n        <span class=\"hljs-attr\">body</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n      });\n\n    <span class=\"hljs-comment\">// Standard React component</span>\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Flex</span> <span class=\"hljs-attr\">gap</span>=<span class=\"hljs-string\">{16}</span> <span class=\"hljs-attr\">flexDirection</span>=<span class=\"hljs-string\">&#x27;column&#x27;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormField</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&#x27;Connection&#x27;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;connection-picker&#x27;</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AutomationConnectionPicker</span>\n                    <span class=\"hljs-attr\">schema</span>=<span class=\"hljs-string\">{</span>&#x27;<span class=\"hljs-attr\">connection</span>&#x27;}\n                    <span class=\"hljs-attr\">connectionId</span>=<span class=\"hljs-string\">{value.connectionId}</span>\n                    <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(connectionId)</span> =&gt;</span> updateValue({ connectionId })}\n                /&gt;\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormField</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormField</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">{</span>&#x27;<span class=\"hljs-attr\">To</span>&#x27;} <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;send-email-to&#x27;</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AutomationTextInput</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value.to}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(to)</span> =&gt;</span> updateValue({ to })} /&gt;\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormField</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormField</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">{</span>&#x27;<span class=\"hljs-attr\">Subject</span>&#x27;} <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;send-email-subject&#x27;</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AutomationTextInput</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value.subject}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(subject)</span> =&gt;</span> updateValue({ subject })} /&gt;\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormField</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormField</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">{</span>&#x27;<span class=\"hljs-attr\">Body</span>&#x27;} <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;send-email-body&#x27;</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AutomationCodeEditor</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value.body}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(body)</span> =&gt;</span> updateValue({ body })} /&gt;\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormField</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Flex</span>&gt;</span></span>\n    );\n\n}\n\n\nSendEmailInputEditor.displayName = <span class=\"hljs-string\">&#x27;SendEmailInputEditor&#x27;</span>;\n\n<span class=\"hljs-comment\">// This is a helper provided by the Dynatrace SDK, it wraps our component so that it can be used by Workflows</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> SendEmailForm: React.FunctionComponent = InputEditorWrapper(SendEmailInputEditor);\n</code></pre>\n<h2 id=\"testthewidget\">Test the Widget</h2>\n<p>If you haven't deployed the app with the settings schema file, do it now:</p>\n<pre><code class=\"hljs bash language-bash\">npm run deploy\n</code></pre>\n<p>Open the dev helper, you should see the new widget:  </p>\n<p><img src=\"assets/widget-connection.png\" alt=\"widget-connection.png\" /></p>","activityList":[]}]}]